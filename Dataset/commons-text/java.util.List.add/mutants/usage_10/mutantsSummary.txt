0	0	0	0
1	0	1	1
===	0	DELETE_CONTROL	if (nestedVarCount == 0) {     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));     if (substitutionInVariablesEnabled) {         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);         substitute(bufName, 0, bufName.length());         varNameExpr = bufName.toString();     }     pos += endMatchLen;     final int endPos = pos;     java.lang.String varName = varNameExpr;     java.lang.String varDefaultValue = null;     if (valueDelimMatcher != null) {         final char[] varNameExprChars = varNameExpr.toCharArray();         int valueDelimiterMatchLen = 0;         for (int i = 0; i < (varNameExprChars.length); i++) {             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                 break;             }             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                 varName = varNameExpr.substring(0, i);                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                 break;             }         }     }     if (priorVariables == null) {         priorVariables = new java.util.ArrayList<>();         priorVariables.add(new java.lang.String(chars, offset, length));     }     checkCyclicSubstitution(varName, priorVariables);     priorVariables.add(varName);     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);     if (varValue == null) {         varValue = varDefaultValue;     }     if (varValue != null) {         final int varLen = varValue.length();         buf.replace(startPos, endPos, varValue);         altered = true;         int change = 0;         if (!substitutionInValuesDisabled) {             change = substitute(buf, startPos, varLen, priorVariables);         }         change = (change + varLen) - (endPos - startPos);         pos += change;         bufEnd += change;         lengthChange += change;         chars = buf.buffer;     }     priorVariables.remove(((priorVariables.size()) - 1));     break; }	if (nestedVarCount == 0) {     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));     if (substitutionInVariablesEnabled) {         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);         substitute(bufName, 0, bufName.length());         varNameExpr = bufName.toString();     }     pos += endMatchLen;     final int endPos = pos;     java.lang.String varName = varNameExpr;     java.lang.String varDefaultValue = null;     if (valueDelimMatcher != null) {         final char[] varNameExprChars = varNameExpr.toCharArray();         int valueDelimiterMatchLen = 0;         for (int i = 0; i < (varNameExprChars.length); i++) {             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                 break;             }             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                 varName = varNameExpr.substring(0, i);                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                 break;             }         }     }     if (priorVariables == null) {         priorVariables = new java.util.ArrayList<>();         priorVariables.add(new java.lang.String(chars, offset, length));     }     checkCyclicSubstitution(varName, priorVariables);     priorVariables.add(varName);     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);     if (varValue == null) {         varValue = varDefaultValue;     }     if (varValue != null) {         final int varLen = varValue.length();         buf.replace(startPos, endPos, varValue);         altered = true;         int change = 0;         if (!substitutionInValuesDisabled) {             change = substitute(buf, startPos, varLen, priorVariables);         }         change = (change + varLen) - (endPos - startPos);         pos += change;         bufEnd += change;         lengthChange += change;         chars = buf.buffer;     }     priorVariables.remove(((priorVariables.size()) - 1));     break; }
2	0	1	1
===	0	DELETE_STRUCTURE	if (endMatchLen == 0) {     pos++; }else {     if (nestedVarCount == 0) {         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));         if (substitutionInVariablesEnabled) {             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);             substitute(bufName, 0, bufName.length());             varNameExpr = bufName.toString();         }         pos += endMatchLen;         final int endPos = pos;         java.lang.String varName = varNameExpr;         java.lang.String varDefaultValue = null;         if (valueDelimMatcher != null) {             final char[] varNameExprChars = varNameExpr.toCharArray();             int valueDelimiterMatchLen = 0;             for (int i = 0; i < (varNameExprChars.length); i++) {                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                     break;                 }                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                     varName = varNameExpr.substring(0, i);                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                     break;                 }             }         }         if (priorVariables == null) {             priorVariables = new java.util.ArrayList<>();             priorVariables.add(new java.lang.String(chars, offset, length));         }         checkCyclicSubstitution(varName, priorVariables);         priorVariables.add(varName);         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);         if (varValue == null) {             varValue = varDefaultValue;         }         if (varValue != null) {             final int varLen = varValue.length();             buf.replace(startPos, endPos, varValue);             altered = true;             int change = 0;             if (!substitutionInValuesDisabled) {                 change = substitute(buf, startPos, varLen, priorVariables);             }             change = (change + varLen) - (endPos - startPos);             pos += change;             bufEnd += change;             lengthChange += change;             chars = buf.buffer;         }         priorVariables.remove(((priorVariables.size()) - 1));         break;     }     nestedVarCount--;     pos += endMatchLen; }
3	0	1	1
===	0	DELETE_USAGE	priorVariables.add(varName)
4	0	1	1
===	0	DELETE_CONTROL	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {             if (this.preserveEscapes) {                 pos++;                 continue;             }             buf.deleteCharAt((pos - 1));             chars = buf.buffer;             lengthChange--;             altered = true;             bufEnd--;         }else {             final int startPos = pos;             pos += startMatchLen;             int endMatchLen = 0;             int nestedVarCount = 0;             while (pos < bufEnd) {                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     nestedVarCount++;                     pos += endMatchLen;                     continue;                 }                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                 if (endMatchLen == 0) {                     pos++;                 }else {                     if (nestedVarCount == 0) {                         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                         if (substitutionInVariablesEnabled) {                             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                             substitute(bufName, 0, bufName.length());                             varNameExpr = bufName.toString();                         }                         pos += endMatchLen;                         final int endPos = pos;                         java.lang.String varName = varNameExpr;                         java.lang.String varDefaultValue = null;                         if (valueDelimMatcher != null) {                             final char[] varNameExprChars = varNameExpr.toCharArray();                             int valueDelimiterMatchLen = 0;                             for (int i = 0; i < (varNameExprChars.length); i++) {                                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                     break;                                 }                                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                     varName = varNameExpr.substring(0, i);                                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                     break;                                 }                             }                         }                         if (priorVariables == null) {                             priorVariables = new java.util.ArrayList<>();                             priorVariables.add(new java.lang.String(chars, offset, length));                         }                         checkCyclicSubstitution(varName, priorVariables);                         priorVariables.add(varName);                         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                         if (varValue == null) {                             varValue = varDefaultValue;                         }                         if (varValue != null) {                             final int varLen = varValue.length();                             buf.replace(startPos, endPos, varValue);                             altered = true;                             int change = 0;                             if (!substitutionInValuesDisabled) {                                 change = substitute(buf, startPos, varLen, priorVariables);                             }                             change = (change + varLen) - (endPos - startPos);                             pos += change;                             bufEnd += change;                             lengthChange += change;                             chars = buf.buffer;                         }                         priorVariables.remove(((priorVariables.size()) - 1));                         break;                     }                     nestedVarCount--;                     pos += endMatchLen;                 }             }          }     } } 	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {             if (this.preserveEscapes) {                 pos++;                 continue;             }             buf.deleteCharAt((pos - 1));             chars = buf.buffer;             lengthChange--;             altered = true;             bufEnd--;         }else {             final int startPos = pos;             pos += startMatchLen;             int endMatchLen = 0;             int nestedVarCount = 0;             while (pos < bufEnd) {                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     nestedVarCount++;                     pos += endMatchLen;                     continue;                 }                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                 if (endMatchLen == 0) {                     pos++;                 }else {                     if (nestedVarCount == 0) {                         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                         if (substitutionInVariablesEnabled) {                             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                             substitute(bufName, 0, bufName.length());                             varNameExpr = bufName.toString();                         }                         pos += endMatchLen;                         final int endPos = pos;                         java.lang.String varName = varNameExpr;                         java.lang.String varDefaultValue = null;                         if (valueDelimMatcher != null) {                             final char[] varNameExprChars = varNameExpr.toCharArray();                             int valueDelimiterMatchLen = 0;                             for (int i = 0; i < (varNameExprChars.length); i++) {                                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                     break;                                 }                                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                     varName = varNameExpr.substring(0, i);                                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                     break;                                 }                             }                         }                         if (priorVariables == null) {                             priorVariables = new java.util.ArrayList<>();                             priorVariables.add(new java.lang.String(chars, offset, length));                         }                         checkCyclicSubstitution(varName, priorVariables);                         priorVariables.add(varName);                         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                         if (varValue == null) {                             varValue = varDefaultValue;                         }                         if (varValue != null) {                             final int varLen = varValue.length();                             buf.replace(startPos, endPos, varValue);                             altered = true;                             int change = 0;                             if (!substitutionInValuesDisabled) {                                 change = substitute(buf, startPos, varLen, priorVariables);                             }                             change = (change + varLen) - (endPos - startPos);                             pos += change;                             bufEnd += change;                             lengthChange += change;                             chars = buf.buffer;                         }                         priorVariables.remove(((priorVariables.size()) - 1));                         break;                     }                     nestedVarCount--;                     pos += endMatchLen;                 }             }          }     } } 
5	4	2	2
===	0	DELETE_CONTROL	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {             if (this.preserveEscapes) {                 pos++;                 continue;             }             buf.deleteCharAt((pos - 1));             chars = buf.buffer;             lengthChange--;             altered = true;             bufEnd--;         }else {             final int startPos = pos;             pos += startMatchLen;             int endMatchLen = 0;             int nestedVarCount = 0;             while (pos < bufEnd) {                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     nestedVarCount++;                     pos += endMatchLen;                     continue;                 }                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                 if (endMatchLen == 0) {                     pos++;                 }else {                     if (nestedVarCount == 0) {                         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                         if (substitutionInVariablesEnabled) {                             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                             substitute(bufName, 0, bufName.length());                             varNameExpr = bufName.toString();                         }                         pos += endMatchLen;                         final int endPos = pos;                         java.lang.String varName = varNameExpr;                         java.lang.String varDefaultValue = null;                         if (valueDelimMatcher != null) {                             final char[] varNameExprChars = varNameExpr.toCharArray();                             int valueDelimiterMatchLen = 0;                             for (int i = 0; i < (varNameExprChars.length); i++) {                                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                     break;                                 }                                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                     varName = varNameExpr.substring(0, i);                                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                     break;                                 }                             }                         }                         if (priorVariables == null) {                             priorVariables = new java.util.ArrayList<>();                             priorVariables.add(new java.lang.String(chars, offset, length));                         }                         checkCyclicSubstitution(varName, priorVariables);                         priorVariables.add(varName);                         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                         if (varValue == null) {                             varValue = varDefaultValue;                         }                         if (varValue != null) {                             final int varLen = varValue.length();                             buf.replace(startPos, endPos, varValue);                             altered = true;                             int change = 0;                             if (!substitutionInValuesDisabled) {                                 change = substitute(buf, startPos, varLen, priorVariables);                             }                             change = (change + varLen) - (endPos - startPos);                             pos += change;                             bufEnd += change;                             lengthChange += change;                             chars = buf.buffer;                         }                         priorVariables.remove(((priorVariables.size()) - 1));                         break;                     }                     nestedVarCount--;                     pos += endMatchLen;                 }             }          }     } } 	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {             if (this.preserveEscapes) {                 pos++;                 continue;             }             buf.deleteCharAt((pos - 1));             chars = buf.buffer;             lengthChange--;             altered = true;             bufEnd--;         }else {             final int startPos = pos;             pos += startMatchLen;             int endMatchLen = 0;             int nestedVarCount = 0;             while (pos < bufEnd) {                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     nestedVarCount++;                     pos += endMatchLen;                     continue;                 }                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                 if (endMatchLen == 0) {                     pos++;                 }else {                     if (nestedVarCount == 0) {                         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                         if (substitutionInVariablesEnabled) {                             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                             substitute(bufName, 0, bufName.length());                             varNameExpr = bufName.toString();                         }                         pos += endMatchLen;                         final int endPos = pos;                         java.lang.String varName = varNameExpr;                         java.lang.String varDefaultValue = null;                         if (valueDelimMatcher != null) {                             final char[] varNameExprChars = varNameExpr.toCharArray();                             int valueDelimiterMatchLen = 0;                             for (int i = 0; i < (varNameExprChars.length); i++) {                                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                     break;                                 }                                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                     varName = varNameExpr.substring(0, i);                                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                     break;                                 }                             }                         }                         if (priorVariables == null) {                             priorVariables = new java.util.ArrayList<>();                             priorVariables.add(new java.lang.String(chars, offset, length));                         }                         checkCyclicSubstitution(varName, priorVariables);                         priorVariables.add(varName);                         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                         if (varValue == null) {                             varValue = varDefaultValue;                         }                         if (varValue != null) {                             final int varLen = varValue.length();                             buf.replace(startPos, endPos, varValue);                             altered = true;                             int change = 0;                             if (!substitutionInValuesDisabled) {                                 change = substitute(buf, startPos, varLen, priorVariables);                             }                             change = (change + varLen) - (endPos - startPos);                             pos += change;                             bufEnd += change;                             lengthChange += change;                             chars = buf.buffer;                         }                         priorVariables.remove(((priorVariables.size()) - 1));                         break;                     }                     nestedVarCount--;                     pos += endMatchLen;                 }             }          }     } } 
===	1	DELETE_STRUCTURE	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }
6	4	2	2
===	0	DELETE_CONTROL	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {             if (this.preserveEscapes) {                 pos++;                 continue;             }             buf.deleteCharAt((pos - 1));             chars = buf.buffer;             lengthChange--;             altered = true;             bufEnd--;         }else {             final int startPos = pos;             pos += startMatchLen;             int endMatchLen = 0;             int nestedVarCount = 0;             while (pos < bufEnd) {                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     nestedVarCount++;                     pos += endMatchLen;                     continue;                 }                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                 if (endMatchLen == 0) {                     pos++;                 }else {                     if (nestedVarCount == 0) {                         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                         if (substitutionInVariablesEnabled) {                             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                             substitute(bufName, 0, bufName.length());                             varNameExpr = bufName.toString();                         }                         pos += endMatchLen;                         final int endPos = pos;                         java.lang.String varName = varNameExpr;                         java.lang.String varDefaultValue = null;                         if (valueDelimMatcher != null) {                             final char[] varNameExprChars = varNameExpr.toCharArray();                             int valueDelimiterMatchLen = 0;                             for (int i = 0; i < (varNameExprChars.length); i++) {                                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                     break;                                 }                                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                     varName = varNameExpr.substring(0, i);                                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                     break;                                 }                             }                         }                         if (priorVariables == null) {                             priorVariables = new java.util.ArrayList<>();                             priorVariables.add(new java.lang.String(chars, offset, length));                         }                         checkCyclicSubstitution(varName, priorVariables);                         priorVariables.add(varName);                         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                         if (varValue == null) {                             varValue = varDefaultValue;                         }                         if (varValue != null) {                             final int varLen = varValue.length();                             buf.replace(startPos, endPos, varValue);                             altered = true;                             int change = 0;                             if (!substitutionInValuesDisabled) {                                 change = substitute(buf, startPos, varLen, priorVariables);                             }                             change = (change + varLen) - (endPos - startPos);                             pos += change;                             bufEnd += change;                             lengthChange += change;                             chars = buf.buffer;                         }                         priorVariables.remove(((priorVariables.size()) - 1));                         break;                     }                     nestedVarCount--;                     pos += endMatchLen;                 }             }          }     } } 	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {             if (this.preserveEscapes) {                 pos++;                 continue;             }             buf.deleteCharAt((pos - 1));             chars = buf.buffer;             lengthChange--;             altered = true;             bufEnd--;         }else {             final int startPos = pos;             pos += startMatchLen;             int endMatchLen = 0;             int nestedVarCount = 0;             while (pos < bufEnd) {                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     nestedVarCount++;                     pos += endMatchLen;                     continue;                 }                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                 if (endMatchLen == 0) {                     pos++;                 }else {                     if (nestedVarCount == 0) {                         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                         if (substitutionInVariablesEnabled) {                             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                             substitute(bufName, 0, bufName.length());                             varNameExpr = bufName.toString();                         }                         pos += endMatchLen;                         final int endPos = pos;                         java.lang.String varName = varNameExpr;                         java.lang.String varDefaultValue = null;                         if (valueDelimMatcher != null) {                             final char[] varNameExprChars = varNameExpr.toCharArray();                             int valueDelimiterMatchLen = 0;                             for (int i = 0; i < (varNameExprChars.length); i++) {                                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                     break;                                 }                                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                     varName = varNameExpr.substring(0, i);                                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                     break;                                 }                             }                         }                         if (priorVariables == null) {                             priorVariables = new java.util.ArrayList<>();                             priorVariables.add(new java.lang.String(chars, offset, length));                         }                         checkCyclicSubstitution(varName, priorVariables);                         priorVariables.add(varName);                         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                         if (varValue == null) {                             varValue = varDefaultValue;                         }                         if (varValue != null) {                             final int varLen = varValue.length();                             buf.replace(startPos, endPos, varValue);                             altered = true;                             int change = 0;                             if (!substitutionInValuesDisabled) {                                 change = substitute(buf, startPos, varLen, priorVariables);                             }                             change = (change + varLen) - (endPos - startPos);                             pos += change;                             bufEnd += change;                             lengthChange += change;                             chars = buf.buffer;                         }                         priorVariables.remove(((priorVariables.size()) - 1));                         break;                     }                     nestedVarCount--;                     pos += endMatchLen;                 }             }          }     } } 
===	1	DELETE_USAGE	{     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }
7	3	2	2
===	0	DELETE_USAGE	priorVariables.add(varName)
===	1	DELETE_STRUCTURE	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }
8	0	1	1
===	0	DELETE_CONTROL	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }
9	4	2	2
===	0	DELETE_CONTROL	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {             if (this.preserveEscapes) {                 pos++;                 continue;             }             buf.deleteCharAt((pos - 1));             chars = buf.buffer;             lengthChange--;             altered = true;             bufEnd--;         }else {             final int startPos = pos;             pos += startMatchLen;             int endMatchLen = 0;             int nestedVarCount = 0;             while (pos < bufEnd) {                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     nestedVarCount++;                     pos += endMatchLen;                     continue;                 }                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                 if (endMatchLen == 0) {                     pos++;                 }else {                     if (nestedVarCount == 0) {                         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                         if (substitutionInVariablesEnabled) {                             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                             substitute(bufName, 0, bufName.length());                             varNameExpr = bufName.toString();                         }                         pos += endMatchLen;                         final int endPos = pos;                         java.lang.String varName = varNameExpr;                         java.lang.String varDefaultValue = null;                         if (valueDelimMatcher != null) {                             final char[] varNameExprChars = varNameExpr.toCharArray();                             int valueDelimiterMatchLen = 0;                             for (int i = 0; i < (varNameExprChars.length); i++) {                                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                     break;                                 }                                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                     varName = varNameExpr.substring(0, i);                                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                     break;                                 }                             }                         }                         if (priorVariables == null) {                             priorVariables = new java.util.ArrayList<>();                             priorVariables.add(new java.lang.String(chars, offset, length));                         }                         checkCyclicSubstitution(varName, priorVariables);                         priorVariables.add(varName);                         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                         if (varValue == null) {                             varValue = varDefaultValue;                         }                         if (varValue != null) {                             final int varLen = varValue.length();                             buf.replace(startPos, endPos, varValue);                             altered = true;                             int change = 0;                             if (!substitutionInValuesDisabled) {                                 change = substitute(buf, startPos, varLen, priorVariables);                             }                             change = (change + varLen) - (endPos - startPos);                             pos += change;                             bufEnd += change;                             lengthChange += change;                             chars = buf.buffer;                         }                         priorVariables.remove(((priorVariables.size()) - 1));                         break;                     }                     nestedVarCount--;                     pos += endMatchLen;                 }             }          }     } } 	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {             if (this.preserveEscapes) {                 pos++;                 continue;             }             buf.deleteCharAt((pos - 1));             chars = buf.buffer;             lengthChange--;             altered = true;             bufEnd--;         }else {             final int startPos = pos;             pos += startMatchLen;             int endMatchLen = 0;             int nestedVarCount = 0;             while (pos < bufEnd) {                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     nestedVarCount++;                     pos += endMatchLen;                     continue;                 }                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                 if (endMatchLen == 0) {                     pos++;                 }else {                     if (nestedVarCount == 0) {                         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                         if (substitutionInVariablesEnabled) {                             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                             substitute(bufName, 0, bufName.length());                             varNameExpr = bufName.toString();                         }                         pos += endMatchLen;                         final int endPos = pos;                         java.lang.String varName = varNameExpr;                         java.lang.String varDefaultValue = null;                         if (valueDelimMatcher != null) {                             final char[] varNameExprChars = varNameExpr.toCharArray();                             int valueDelimiterMatchLen = 0;                             for (int i = 0; i < (varNameExprChars.length); i++) {                                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                     break;                                 }                                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                     varName = varNameExpr.substring(0, i);                                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                     break;                                 }                             }                         }                         if (priorVariables == null) {                             priorVariables = new java.util.ArrayList<>();                             priorVariables.add(new java.lang.String(chars, offset, length));                         }                         checkCyclicSubstitution(varName, priorVariables);                         priorVariables.add(varName);                         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                         if (varValue == null) {                             varValue = varDefaultValue;                         }                         if (varValue != null) {                             final int varLen = varValue.length();                             buf.replace(startPos, endPos, varValue);                             altered = true;                             int change = 0;                             if (!substitutionInValuesDisabled) {                                 change = substitute(buf, startPos, varLen, priorVariables);                             }                             change = (change + varLen) - (endPos - startPos);                             pos += change;                             bufEnd += change;                             lengthChange += change;                             chars = buf.buffer;                         }                         priorVariables.remove(((priorVariables.size()) - 1));                         break;                     }                     nestedVarCount--;                     pos += endMatchLen;                 }             }          }     } } 
===	1	SWAP_USAGE	if (nestedVarCount == 0) {     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));     if (substitutionInVariablesEnabled) {         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);         substitute(bufName, 0, bufName.length());         varNameExpr = bufName.toString();     }     pos += endMatchLen;     final int endPos = pos;     java.lang.String varName = varNameExpr;     java.lang.String varDefaultValue = null;     if (valueDelimMatcher != null) {         final char[] varNameExprChars = varNameExpr.toCharArray();         int valueDelimiterMatchLen = 0;         for (int i = 0; i < (varNameExprChars.length); i++) {             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                 break;             }             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                 varName = varNameExpr.substring(0, i);                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                 break;             }         }     }     if (priorVariables == null) {         priorVariables = new java.util.ArrayList<>();         priorVariables.add(new java.lang.String(chars, offset, length));     }     checkCyclicSubstitution(varName, priorVariables);     priorVariables.add(varName);     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);     if (varValue == null) {         varValue = varDefaultValue;     }     if (varValue != null) {         final int varLen = varValue.length();         buf.replace(startPos, endPos, varValue);         altered = true;         int change = 0;         if (!substitutionInValuesDisabled) {             change = substitute(buf, startPos, varLen, priorVariables);         }         change = (change + varLen) - (endPos - startPos);         pos += change;         bufEnd += change;         lengthChange += change;         chars = buf.buffer;     }     priorVariables.remove(((priorVariables.size()) - 1));     break; }	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (startMatchLen == 0) {                     pos++;                 }else {                     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {                         if (this.preserveEscapes) {                             pos++;                             continue;                         }                         buf.deleteCharAt((pos - 1));                         chars = buf.buffer;                         lengthChange--;                         altered = true;                         bufEnd--;                     }else {                         final int startPos = pos;                         pos += startMatchLen;                         int endMatchLen = 0;                         int nestedVarCount = 0;                         while (pos < bufEnd) {                             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                                 nestedVarCount++;                                 pos += endMatchLen;                                 continue;                             }                             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                             if (endMatchLen == 0) {                                 pos++;                             }else {                                 if (nestedVarCount == 0) {                                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                                     if (substitutionInVariablesEnabled) {                                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                                         substitute(bufName, 0, bufName.length());                                         varNameExpr = bufName.toString();                                     }                                     pos += endMatchLen;                                     final int endPos = pos;                                     java.lang.String varName = varNameExpr;                                     java.lang.String varDefaultValue = null;                                     if (valueDelimMatcher != null) {                                         final char[] varNameExprChars = varNameExpr.toCharArray();                                         int valueDelimiterMatchLen = 0;                                         for (int i = 0; i < (varNameExprChars.length); i++) {                                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                                 break;                                             }                                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                                 varName = varNameExpr.substring(0, i);                                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                                 break;                                             }                                         }                                     }                                     if (priorVariables == null) {                                         priorVariables = new java.util.ArrayList<>();                                         priorVariables.add(new java.lang.String(chars, offset, length));                                     }                                     checkCyclicSubstitution(varName, priorVariables);                                     priorVariables.add(varName);                                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                                     if (varValue == null) {                                         varValue = varDefaultValue;                                     }                                     if (varValue != null) {                                         final int varLen = varValue.length();                                         buf.replace(startPos, endPos, varValue);                                         altered = true;                                         int change = 0;                                         if (!substitutionInValuesDisabled) {                                             change = substitute(buf, startPos, varLen, priorVariables);                                         }                                         change = (change + varLen) - (endPos - startPos);                                         pos += change;                                         bufEnd += change;                                         lengthChange += change;                                         chars = buf.buffer;                                     }                                     priorVariables.remove(((priorVariables.size()) - 1));                                     break;                                 }                                 nestedVarCount--;                                 pos += endMatchLen;                             }                         }                      }                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }
10	0	1	1
===	0	DELETE_CONTROL	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }
11	10	2	2
===	0	DELETE_CONTROL	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }
===	1	SWAP_USAGE	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             while (pos < bufEnd) {                 final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {                     if (this.preserveEscapes) {                         pos++;                         continue;                     }                     buf.deleteCharAt((pos - 1));                     chars = buf.buffer;                     lengthChange--;                     altered = true;                     bufEnd--;                 }else {                     final int startPos = pos;                     pos += startMatchLen;                     int endMatchLen = 0;                     int nestedVarCount = 0;                     while (pos < bufEnd) {                         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                             nestedVarCount++;                             pos += endMatchLen;                             continue;                         }                         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                         if (endMatchLen == 0) {                             pos++;                         }else {                             if (nestedVarCount == 0) {                                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                                 if (substitutionInVariablesEnabled) {                                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                                     substitute(bufName, 0, bufName.length());                                     varNameExpr = bufName.toString();                                 }                                 pos += endMatchLen;                                 final int endPos = pos;                                 java.lang.String varName = varNameExpr;                                 java.lang.String varDefaultValue = null;                                 if (valueDelimMatcher != null) {                                     final char[] varNameExprChars = varNameExpr.toCharArray();                                     int valueDelimiterMatchLen = 0;                                     for (int i = 0; i < (varNameExprChars.length); i++) {                                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                             break;                                         }                                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                             varName = varNameExpr.substring(0, i);                                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                             break;                                         }                                     }                                 }                                 if (priorVariables == null) {                                     priorVariables = new java.util.ArrayList<>();                                     priorVariables.add(new java.lang.String(chars, offset, length));                                 }                                 checkCyclicSubstitution(varName, priorVariables);                                 priorVariables.add(varName);                                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                                 if (varValue == null) {                                     varValue = varDefaultValue;                                 }                                 if (varValue != null) {                                     final int varLen = varValue.length();                                     buf.replace(startPos, endPos, varValue);                                     altered = true;                                     int change = 0;                                     if (!substitutionInValuesDisabled) {                                         change = substitute(buf, startPos, varLen, priorVariables);                                     }                                     change = (change + varLen) - (endPos - startPos);                                     pos += change;                                     bufEnd += change;                                     lengthChange += change;                                     chars = buf.buffer;                                 }                                 priorVariables.remove(((priorVariables.size()) - 1));                                 break;                             }                             nestedVarCount--;                             pos += endMatchLen;                         }                     }                  }             }          }      } } 	if (endMatchLen == 0) {     pos++; }else {     if (nestedVarCount == 0) {         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));         if (substitutionInVariablesEnabled) {             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);             substitute(bufName, 0, bufName.length());             varNameExpr = bufName.toString();         }         pos += endMatchLen;         final int endPos = pos;         java.lang.String varName = varNameExpr;         java.lang.String varDefaultValue = null;         if (valueDelimMatcher != null) {             final char[] varNameExprChars = varNameExpr.toCharArray();             int valueDelimiterMatchLen = 0;             for (int i = 0; i < (varNameExprChars.length); i++) {                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                     break;                 }                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                     varName = varNameExpr.substring(0, i);                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                     break;                 }             }         }         if (priorVariables == null) {             priorVariables = new java.util.ArrayList<>();             priorVariables.add(new java.lang.String(chars, offset, length));         }         checkCyclicSubstitution(varName, priorVariables);         priorVariables.add(varName);         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);         if (varValue == null) {             varValue = varDefaultValue;         }         if (varValue != null) {             final int varLen = varValue.length();             buf.replace(startPos, endPos, varValue);             altered = true;             int change = 0;             if (!substitutionInValuesDisabled) {                 change = substitute(buf, startPos, varLen, priorVariables);             }             change = (change + varLen) - (endPos - startPos);             pos += change;             bufEnd += change;             lengthChange += change;             chars = buf.buffer;         }         priorVariables.remove(((priorVariables.size()) - 1));         break;     }     nestedVarCount--;     pos += endMatchLen; }
12	3	2	2
===	0	DELETE_USAGE	priorVariables.add(varName)
===	1	SWAP_USAGE	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (startMatchLen == 0) {                 pos++;             }else {                 if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {                     if (this.preserveEscapes) {                         pos++;                         continue;                     }                     buf.deleteCharAt((pos - 1));                     chars = buf.buffer;                     lengthChange--;                     altered = true;                     bufEnd--;                 }else {                     final int startPos = pos;                     pos += startMatchLen;                     int endMatchLen = 0;                     int nestedVarCount = 0;                     while (pos < bufEnd) {                         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                             nestedVarCount++;                             pos += endMatchLen;                             continue;                         }                         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                         if (endMatchLen == 0) {                             pos++;                         }else {                             if (nestedVarCount == 0) {                                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                                 if (substitutionInVariablesEnabled) {                                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                                     substitute(bufName, 0, bufName.length());                                     varNameExpr = bufName.toString();                                 }                                 pos += endMatchLen;                                 final int endPos = pos;                                 java.lang.String varName = varNameExpr;                                 java.lang.String varDefaultValue = null;                                 if (valueDelimMatcher != null) {                                     final char[] varNameExprChars = varNameExpr.toCharArray();                                     int valueDelimiterMatchLen = 0;                                     for (int i = 0; i < (varNameExprChars.length); i++) {                                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                             break;                                         }                                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                             varName = varNameExpr.substring(0, i);                                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                             break;                                         }                                     }                                 }                                 if (priorVariables == null) {                                     priorVariables = new java.util.ArrayList<>();                                     priorVariables.add(new java.lang.String(chars, offset, length));                                 }                                 checkCyclicSubstitution(varName, priorVariables);                                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                                 if (varValue == null) {                                     varValue = varDefaultValue;                                 }                                 if (varValue != null) {                                     final int varLen = varValue.length();                                     buf.replace(startPos, endPos, varValue);                                     altered = true;                                     int change = 0;                                     if (!substitutionInValuesDisabled) {                                         change = substitute(buf, startPos, varLen, priorVariables);                                     }                                     change = (change + varLen) - (endPos - startPos);                                     pos += change;                                     bufEnd += change;                                     lengthChange += change;                                     chars = buf.buffer;                                 }                                 priorVariables.remove(((priorVariables.size()) - 1));                                 break;                             }                             nestedVarCount--;                             pos += endMatchLen;                         }                     }                  }             }         }      } }	if (endMatchLen == 0) {     pos++; }else {     if (nestedVarCount == 0) {         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));         if (substitutionInVariablesEnabled) {             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);             substitute(bufName, 0, bufName.length());             varNameExpr = bufName.toString();         }         pos += endMatchLen;         final int endPos = pos;         java.lang.String varName = varNameExpr;         java.lang.String varDefaultValue = null;         if (valueDelimMatcher != null) {             final char[] varNameExprChars = varNameExpr.toCharArray();             int valueDelimiterMatchLen = 0;             for (int i = 0; i < (varNameExprChars.length); i++) {                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                     break;                 }                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                     varName = varNameExpr.substring(0, i);                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                     break;                 }             }         }         if (priorVariables == null) {             priorVariables = new java.util.ArrayList<>();             priorVariables.add(new java.lang.String(chars, offset, length));         }         checkCyclicSubstitution(varName, priorVariables);         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);         if (varValue == null) {             varValue = varDefaultValue;         }         if (varValue != null) {             final int varLen = varValue.length();             buf.replace(startPos, endPos, varValue);             altered = true;             int change = 0;             if (!substitutionInValuesDisabled) {                 change = substitute(buf, startPos, varLen, priorVariables);             }             change = (change + varLen) - (endPos - startPos);             pos += change;             bufEnd += change;             lengthChange += change;             chars = buf.buffer;         }         priorVariables.remove(((priorVariables.size()) - 1));         break;     }     nestedVarCount--;     pos += endMatchLen; }
13	8	2	2
===	0	DELETE_CONTROL	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }
===	1	MUTATE_CONDITION	pos < bufEnd	false
14	4	2	2
===	0	DELETE_CONTROL	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {             if (this.preserveEscapes) {                 pos++;                 continue;             }             buf.deleteCharAt((pos - 1));             chars = buf.buffer;             lengthChange--;             altered = true;             bufEnd--;         }else {             final int startPos = pos;             pos += startMatchLen;             int endMatchLen = 0;             int nestedVarCount = 0;             while (pos < bufEnd) {                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     nestedVarCount++;                     pos += endMatchLen;                     continue;                 }                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                 if (endMatchLen == 0) {                     pos++;                 }else {                     if (nestedVarCount == 0) {                         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                         if (substitutionInVariablesEnabled) {                             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                             substitute(bufName, 0, bufName.length());                             varNameExpr = bufName.toString();                         }                         pos += endMatchLen;                         final int endPos = pos;                         java.lang.String varName = varNameExpr;                         java.lang.String varDefaultValue = null;                         if (valueDelimMatcher != null) {                             final char[] varNameExprChars = varNameExpr.toCharArray();                             int valueDelimiterMatchLen = 0;                             for (int i = 0; i < (varNameExprChars.length); i++) {                                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                     break;                                 }                                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                     varName = varNameExpr.substring(0, i);                                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                     break;                                 }                             }                         }                         if (priorVariables == null) {                             priorVariables = new java.util.ArrayList<>();                             priorVariables.add(new java.lang.String(chars, offset, length));                         }                         checkCyclicSubstitution(varName, priorVariables);                         priorVariables.add(varName);                         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                         if (varValue == null) {                             varValue = varDefaultValue;                         }                         if (varValue != null) {                             final int varLen = varValue.length();                             buf.replace(startPos, endPos, varValue);                             altered = true;                             int change = 0;                             if (!substitutionInValuesDisabled) {                                 change = substitute(buf, startPos, varLen, priorVariables);                             }                             change = (change + varLen) - (endPos - startPos);                             pos += change;                             bufEnd += change;                             lengthChange += change;                             chars = buf.buffer;                         }                         priorVariables.remove(((priorVariables.size()) - 1));                         break;                     }                     nestedVarCount--;                     pos += endMatchLen;                 }             }          }     } } 	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {             if (this.preserveEscapes) {                 pos++;                 continue;             }             buf.deleteCharAt((pos - 1));             chars = buf.buffer;             lengthChange--;             altered = true;             bufEnd--;         }else {             final int startPos = pos;             pos += startMatchLen;             int endMatchLen = 0;             int nestedVarCount = 0;             while (pos < bufEnd) {                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     nestedVarCount++;                     pos += endMatchLen;                     continue;                 }                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                 if (endMatchLen == 0) {                     pos++;                 }else {                     if (nestedVarCount == 0) {                         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                         if (substitutionInVariablesEnabled) {                             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                             substitute(bufName, 0, bufName.length());                             varNameExpr = bufName.toString();                         }                         pos += endMatchLen;                         final int endPos = pos;                         java.lang.String varName = varNameExpr;                         java.lang.String varDefaultValue = null;                         if (valueDelimMatcher != null) {                             final char[] varNameExprChars = varNameExpr.toCharArray();                             int valueDelimiterMatchLen = 0;                             for (int i = 0; i < (varNameExprChars.length); i++) {                                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                     break;                                 }                                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                     varName = varNameExpr.substring(0, i);                                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                     break;                                 }                             }                         }                         if (priorVariables == null) {                             priorVariables = new java.util.ArrayList<>();                             priorVariables.add(new java.lang.String(chars, offset, length));                         }                         checkCyclicSubstitution(varName, priorVariables);                         priorVariables.add(varName);                         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                         if (varValue == null) {                             varValue = varDefaultValue;                         }                         if (varValue != null) {                             final int varLen = varValue.length();                             buf.replace(startPos, endPos, varValue);                             altered = true;                             int change = 0;                             if (!substitutionInValuesDisabled) {                                 change = substitute(buf, startPos, varLen, priorVariables);                             }                             change = (change + varLen) - (endPos - startPos);                             pos += change;                             bufEnd += change;                             lengthChange += change;                             chars = buf.buffer;                         }                         priorVariables.remove(((priorVariables.size()) - 1));                         break;                     }                     nestedVarCount--;                     pos += endMatchLen;                 }             }          }     } } 
===	1	DELETE_CONTROL	if (nestedVarCount == 0) {     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));     if (substitutionInVariablesEnabled) {         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);         substitute(bufName, 0, bufName.length());         varNameExpr = bufName.toString();     }     pos += endMatchLen;     final int endPos = pos;     java.lang.String varName = varNameExpr;     java.lang.String varDefaultValue = null;     if (valueDelimMatcher != null) {         final char[] varNameExprChars = varNameExpr.toCharArray();         int valueDelimiterMatchLen = 0;         for (int i = 0; i < (varNameExprChars.length); i++) {             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                 break;             }             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                 varName = varNameExpr.substring(0, i);                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                 break;             }         }     }     if (priorVariables == null) {         priorVariables = new java.util.ArrayList<>();         priorVariables.add(new java.lang.String(chars, offset, length));     }     checkCyclicSubstitution(varName, priorVariables);     priorVariables.add(varName);     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);     if (varValue == null) {         varValue = varDefaultValue;     }     if (varValue != null) {         final int varLen = varValue.length();         buf.replace(startPos, endPos, varValue);         altered = true;         int change = 0;         if (!substitutionInValuesDisabled) {             change = substitute(buf, startPos, varLen, priorVariables);         }         change = (change + varLen) - (endPos - startPos);         pos += change;         bufEnd += change;         lengthChange += change;         chars = buf.buffer;     }     priorVariables.remove(((priorVariables.size()) - 1));     break; }	if (nestedVarCount == 0) {     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));     if (substitutionInVariablesEnabled) {         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);         substitute(bufName, 0, bufName.length());         varNameExpr = bufName.toString();     }     pos += endMatchLen;     final int endPos = pos;     java.lang.String varName = varNameExpr;     java.lang.String varDefaultValue = null;     if (valueDelimMatcher != null) {         final char[] varNameExprChars = varNameExpr.toCharArray();         int valueDelimiterMatchLen = 0;         for (int i = 0; i < (varNameExprChars.length); i++) {             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                 break;             }             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                 varName = varNameExpr.substring(0, i);                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                 break;             }         }     }     if (priorVariables == null) {         priorVariables = new java.util.ArrayList<>();         priorVariables.add(new java.lang.String(chars, offset, length));     }     checkCyclicSubstitution(varName, priorVariables);     priorVariables.add(varName);     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);     if (varValue == null) {         varValue = varDefaultValue;     }     if (varValue != null) {         final int varLen = varValue.length();         buf.replace(startPos, endPos, varValue);         altered = true;         int change = 0;         if (!substitutionInValuesDisabled) {             change = substitute(buf, startPos, varLen, priorVariables);         }         change = (change + varLen) - (endPos - startPos);         pos += change;         bufEnd += change;         lengthChange += change;         chars = buf.buffer;     }     priorVariables.remove(((priorVariables.size()) - 1));     break; }
15	0	1	1
===	0	DELETE_CONTROL	while (pos < bufEnd) {     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);         nestedVarCount++;         pos += endMatchLen;         continue;     }     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);     if (endMatchLen == 0) {         pos++;     }else {         if (nestedVarCount == 0) {             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));             if (substitutionInVariablesEnabled) {                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                 substitute(bufName, 0, bufName.length());                 varNameExpr = bufName.toString();             }             pos += endMatchLen;             final int endPos = pos;             java.lang.String varName = varNameExpr;             java.lang.String varDefaultValue = null;             if (valueDelimMatcher != null) {                 final char[] varNameExprChars = varNameExpr.toCharArray();                 int valueDelimiterMatchLen = 0;                 for (int i = 0; i < (varNameExprChars.length); i++) {                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                         break;                     }                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                         varName = varNameExpr.substring(0, i);                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                         break;                     }                 }             }             if (priorVariables == null) {                 priorVariables = new java.util.ArrayList<>();                 priorVariables.add(new java.lang.String(chars, offset, length));             }             checkCyclicSubstitution(varName, priorVariables);             priorVariables.add(varName);             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);             if (varValue == null) {                 varValue = varDefaultValue;             }             if (varValue != null) {                 final int varLen = varValue.length();                 buf.replace(startPos, endPos, varValue);                 altered = true;                 int change = 0;                 if (!substitutionInValuesDisabled) {                     change = substitute(buf, startPos, varLen, priorVariables);                 }                 change = (change + varLen) - (endPos - startPos);                 pos += change;                 bufEnd += change;                 lengthChange += change;                 chars = buf.buffer;             }             priorVariables.remove(((priorVariables.size()) - 1));             break;         }         nestedVarCount--;         pos += endMatchLen;     } } 	while (pos < bufEnd) {     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);         nestedVarCount++;         pos += endMatchLen;         continue;     }     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);     if (endMatchLen == 0) {         pos++;     }else {         if (nestedVarCount == 0) {             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));             if (substitutionInVariablesEnabled) {                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                 substitute(bufName, 0, bufName.length());                 varNameExpr = bufName.toString();             }             pos += endMatchLen;             final int endPos = pos;             java.lang.String varName = varNameExpr;             java.lang.String varDefaultValue = null;             if (valueDelimMatcher != null) {                 final char[] varNameExprChars = varNameExpr.toCharArray();                 int valueDelimiterMatchLen = 0;                 for (int i = 0; i < (varNameExprChars.length); i++) {                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                         break;                     }                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                         varName = varNameExpr.substring(0, i);                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                         break;                     }                 }             }             if (priorVariables == null) {                 priorVariables = new java.util.ArrayList<>();                 priorVariables.add(new java.lang.String(chars, offset, length));             }             checkCyclicSubstitution(varName, priorVariables);             priorVariables.add(varName);             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);             if (varValue == null) {                 varValue = varDefaultValue;             }             if (varValue != null) {                 final int varLen = varValue.length();                 buf.replace(startPos, endPos, varValue);                 altered = true;                 int change = 0;                 if (!substitutionInValuesDisabled) {                     change = substitute(buf, startPos, varLen, priorVariables);                 }                 change = (change + varLen) - (endPos - startPos);                 pos += change;                 bufEnd += change;                 lengthChange += change;                 chars = buf.buffer;             }             priorVariables.remove(((priorVariables.size()) - 1));             break;         }         nestedVarCount--;         pos += endMatchLen;     } } 
16	11	3	3
===	0	DELETE_CONTROL	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }
===	1	SWAP_USAGE	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             while (pos < bufEnd) {                 final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {                     if (this.preserveEscapes) {                         pos++;                         continue;                     }                     buf.deleteCharAt((pos - 1));                     chars = buf.buffer;                     lengthChange--;                     altered = true;                     bufEnd--;                 }else {                     final int startPos = pos;                     pos += startMatchLen;                     int endMatchLen = 0;                     int nestedVarCount = 0;                     while (pos < bufEnd) {                         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                             nestedVarCount++;                             pos += endMatchLen;                             continue;                         }                         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                         if (endMatchLen == 0) {                             pos++;                         }else {                             if (nestedVarCount == 0) {                                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                                 if (substitutionInVariablesEnabled) {                                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                                     substitute(bufName, 0, bufName.length());                                     varNameExpr = bufName.toString();                                 }                                 pos += endMatchLen;                                 final int endPos = pos;                                 java.lang.String varName = varNameExpr;                                 java.lang.String varDefaultValue = null;                                 if (valueDelimMatcher != null) {                                     final char[] varNameExprChars = varNameExpr.toCharArray();                                     int valueDelimiterMatchLen = 0;                                     for (int i = 0; i < (varNameExprChars.length); i++) {                                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                             break;                                         }                                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                             varName = varNameExpr.substring(0, i);                                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                             break;                                         }                                     }                                 }                                 if (priorVariables == null) {                                     priorVariables = new java.util.ArrayList<>();                                     priorVariables.add(new java.lang.String(chars, offset, length));                                 }                                 checkCyclicSubstitution(varName, priorVariables);                                 priorVariables.add(varName);                                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                                 if (varValue == null) {                                     varValue = varDefaultValue;                                 }                                 if (varValue != null) {                                     final int varLen = varValue.length();                                     buf.replace(startPos, endPos, varValue);                                     altered = true;                                     int change = 0;                                     if (!substitutionInValuesDisabled) {                                         change = substitute(buf, startPos, varLen, priorVariables);                                     }                                     change = (change + varLen) - (endPos - startPos);                                     pos += change;                                     bufEnd += change;                                     lengthChange += change;                                     chars = buf.buffer;                                 }                                 priorVariables.remove(((priorVariables.size()) - 1));                                 break;                             }                             nestedVarCount--;                             pos += endMatchLen;                         }                     }                  }             }          }      } } 	if (endMatchLen == 0) {     pos++; }else {     if (nestedVarCount == 0) {         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));         if (substitutionInVariablesEnabled) {             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);             substitute(bufName, 0, bufName.length());             varNameExpr = bufName.toString();         }         pos += endMatchLen;         final int endPos = pos;         java.lang.String varName = varNameExpr;         java.lang.String varDefaultValue = null;         if (valueDelimMatcher != null) {             final char[] varNameExprChars = varNameExpr.toCharArray();             int valueDelimiterMatchLen = 0;             for (int i = 0; i < (varNameExprChars.length); i++) {                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                     break;                 }                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                     varName = varNameExpr.substring(0, i);                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                     break;                 }             }         }         if (priorVariables == null) {             priorVariables = new java.util.ArrayList<>();             priorVariables.add(new java.lang.String(chars, offset, length));         }         checkCyclicSubstitution(varName, priorVariables);         priorVariables.add(varName);         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);         if (varValue == null) {             varValue = varDefaultValue;         }         if (varValue != null) {             final int varLen = varValue.length();             buf.replace(startPos, endPos, varValue);             altered = true;             int change = 0;             if (!substitutionInValuesDisabled) {                 change = substitute(buf, startPos, varLen, priorVariables);             }             change = (change + varLen) - (endPos - startPos);             pos += change;             bufEnd += change;             lengthChange += change;             chars = buf.buffer;         }         priorVariables.remove(((priorVariables.size()) - 1));         break;     }     nestedVarCount--;     pos += endMatchLen; }
===	2	DELETE_CONTROL	if (endMatchLen == 0) {     pos++; }else {     if (nestedVarCount == 0) {         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));         if (substitutionInVariablesEnabled) {             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);             substitute(bufName, 0, bufName.length());             varNameExpr = bufName.toString();         }         pos += endMatchLen;         final int endPos = pos;         java.lang.String varName = varNameExpr;         java.lang.String varDefaultValue = null;         if (valueDelimMatcher != null) {             final char[] varNameExprChars = varNameExpr.toCharArray();             int valueDelimiterMatchLen = 0;             for (int i = 0; i < (varNameExprChars.length); i++) {                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                     break;                 }                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                     varName = varNameExpr.substring(0, i);                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                     break;                 }             }         }         if (priorVariables == null) {             priorVariables = new java.util.ArrayList<>();             priorVariables.add(new java.lang.String(chars, offset, length));         }         checkCyclicSubstitution(varName, priorVariables);         priorVariables.add(varName);         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);         if (varValue == null) {             varValue = varDefaultValue;         }         if (varValue != null) {             final int varLen = varValue.length();             buf.replace(startPos, endPos, varValue);             altered = true;             int change = 0;             if (!substitutionInValuesDisabled) {                 change = substitute(buf, startPos, varLen, priorVariables);             }             change = (change + varLen) - (endPos - startPos);             pos += change;             bufEnd += change;             lengthChange += change;             chars = buf.buffer;         }         priorVariables.remove(((priorVariables.size()) - 1));         break;     }     nestedVarCount--;     pos += endMatchLen; }	if (endMatchLen == 0) {     pos++; }else {     if (nestedVarCount == 0) {         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));         if (substitutionInVariablesEnabled) {             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);             substitute(bufName, 0, bufName.length());             varNameExpr = bufName.toString();         }         pos += endMatchLen;         final int endPos = pos;         java.lang.String varName = varNameExpr;         java.lang.String varDefaultValue = null;         if (valueDelimMatcher != null) {             final char[] varNameExprChars = varNameExpr.toCharArray();             int valueDelimiterMatchLen = 0;             for (int i = 0; i < (varNameExprChars.length); i++) {                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                     break;                 }                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                     varName = varNameExpr.substring(0, i);                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                     break;                 }             }         }         if (priorVariables == null) {             priorVariables = new java.util.ArrayList<>();             priorVariables.add(new java.lang.String(chars, offset, length));         }         checkCyclicSubstitution(varName, priorVariables);         priorVariables.add(varName);         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);         if (varValue == null) {             varValue = varDefaultValue;         }         if (varValue != null) {             final int varLen = varValue.length();             buf.replace(startPos, endPos, varValue);             altered = true;             int change = 0;             if (!substitutionInValuesDisabled) {                 change = substitute(buf, startPos, varLen, priorVariables);             }             change = (change + varLen) - (endPos - startPos);             pos += change;             bufEnd += change;             lengthChange += change;             chars = buf.buffer;         }         priorVariables.remove(((priorVariables.size()) - 1));         break;     }     nestedVarCount--;     pos += endMatchLen; }
17	11	3	3
===	0	DELETE_CONTROL	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }
===	1	SWAP_USAGE	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             while (pos < bufEnd) {                 final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {                     if (this.preserveEscapes) {                         pos++;                         continue;                     }                     buf.deleteCharAt((pos - 1));                     chars = buf.buffer;                     lengthChange--;                     altered = true;                     bufEnd--;                 }else {                     final int startPos = pos;                     pos += startMatchLen;                     int endMatchLen = 0;                     int nestedVarCount = 0;                     while (pos < bufEnd) {                         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                             nestedVarCount++;                             pos += endMatchLen;                             continue;                         }                         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                         if (endMatchLen == 0) {                             pos++;                         }else {                             if (nestedVarCount == 0) {                                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                                 if (substitutionInVariablesEnabled) {                                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                                     substitute(bufName, 0, bufName.length());                                     varNameExpr = bufName.toString();                                 }                                 pos += endMatchLen;                                 final int endPos = pos;                                 java.lang.String varName = varNameExpr;                                 java.lang.String varDefaultValue = null;                                 if (valueDelimMatcher != null) {                                     final char[] varNameExprChars = varNameExpr.toCharArray();                                     int valueDelimiterMatchLen = 0;                                     for (int i = 0; i < (varNameExprChars.length); i++) {                                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                             break;                                         }                                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                             varName = varNameExpr.substring(0, i);                                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                             break;                                         }                                     }                                 }                                 if (priorVariables == null) {                                     priorVariables = new java.util.ArrayList<>();                                     priorVariables.add(new java.lang.String(chars, offset, length));                                 }                                 checkCyclicSubstitution(varName, priorVariables);                                 priorVariables.add(varName);                                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                                 if (varValue == null) {                                     varValue = varDefaultValue;                                 }                                 if (varValue != null) {                                     final int varLen = varValue.length();                                     buf.replace(startPos, endPos, varValue);                                     altered = true;                                     int change = 0;                                     if (!substitutionInValuesDisabled) {                                         change = substitute(buf, startPos, varLen, priorVariables);                                     }                                     change = (change + varLen) - (endPos - startPos);                                     pos += change;                                     bufEnd += change;                                     lengthChange += change;                                     chars = buf.buffer;                                 }                                 priorVariables.remove(((priorVariables.size()) - 1));                                 break;                             }                             nestedVarCount--;                             pos += endMatchLen;                         }                     }                  }             }          }      } } 	if (endMatchLen == 0) {     pos++; }else {     if (nestedVarCount == 0) {         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));         if (substitutionInVariablesEnabled) {             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);             substitute(bufName, 0, bufName.length());             varNameExpr = bufName.toString();         }         pos += endMatchLen;         final int endPos = pos;         java.lang.String varName = varNameExpr;         java.lang.String varDefaultValue = null;         if (valueDelimMatcher != null) {             final char[] varNameExprChars = varNameExpr.toCharArray();             int valueDelimiterMatchLen = 0;             for (int i = 0; i < (varNameExprChars.length); i++) {                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                     break;                 }                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                     varName = varNameExpr.substring(0, i);                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                     break;                 }             }         }         if (priorVariables == null) {             priorVariables = new java.util.ArrayList<>();             priorVariables.add(new java.lang.String(chars, offset, length));         }         checkCyclicSubstitution(varName, priorVariables);         priorVariables.add(varName);         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);         if (varValue == null) {             varValue = varDefaultValue;         }         if (varValue != null) {             final int varLen = varValue.length();             buf.replace(startPos, endPos, varValue);             altered = true;             int change = 0;             if (!substitutionInValuesDisabled) {                 change = substitute(buf, startPos, varLen, priorVariables);             }             change = (change + varLen) - (endPos - startPos);             pos += change;             bufEnd += change;             lengthChange += change;             chars = buf.buffer;         }         priorVariables.remove(((priorVariables.size()) - 1));         break;     }     nestedVarCount--;     pos += endMatchLen; }
===	2	SWAP_USAGE	if (nestedVarCount == 0) {     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));     if (substitutionInVariablesEnabled) {         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);         substitute(bufName, 0, bufName.length());         varNameExpr = bufName.toString();     }     pos += endMatchLen;     final int endPos = pos;     java.lang.String varName = varNameExpr;     java.lang.String varDefaultValue = null;     if (valueDelimMatcher != null) {         final char[] varNameExprChars = varNameExpr.toCharArray();         int valueDelimiterMatchLen = 0;         for (int i = 0; i < (varNameExprChars.length); i++) {             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                 break;             }             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                 varName = varNameExpr.substring(0, i);                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                 break;             }         }     }     if (priorVariables == null) {         priorVariables = new java.util.ArrayList<>();         priorVariables.add(new java.lang.String(chars, offset, length));     }     checkCyclicSubstitution(varName, priorVariables);     priorVariables.add(varName);     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);     if (varValue == null) {         varValue = varDefaultValue;     }     if (varValue != null) {         final int varLen = varValue.length();         buf.replace(startPos, endPos, varValue);         altered = true;         int change = 0;         if (!substitutionInValuesDisabled) {             change = substitute(buf, startPos, varLen, priorVariables);         }         change = (change + varLen) - (endPos - startPos);         pos += change;         bufEnd += change;         lengthChange += change;         chars = buf.buffer;     }     priorVariables.remove(((priorVariables.size()) - 1));     break; }	if (endMatchLen == 0) {     pos++; }else {     if (endMatchLen == 0) {         pos++;     }else {         if (nestedVarCount == 0) {             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));             if (substitutionInVariablesEnabled) {                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                 substitute(bufName, 0, bufName.length());                 varNameExpr = bufName.toString();             }             pos += endMatchLen;             final int endPos = pos;             java.lang.String varName = varNameExpr;             java.lang.String varDefaultValue = null;             if (valueDelimMatcher != null) {                 final char[] varNameExprChars = varNameExpr.toCharArray();                 int valueDelimiterMatchLen = 0;                 for (int i = 0; i < (varNameExprChars.length); i++) {                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                         break;                     }                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                         varName = varNameExpr.substring(0, i);                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                         break;                     }                 }             }             if (priorVariables == null) {                 priorVariables = new java.util.ArrayList<>();                 priorVariables.add(new java.lang.String(chars, offset, length));             }             checkCyclicSubstitution(varName, priorVariables);             priorVariables.add(varName);             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);             if (varValue == null) {                 varValue = varDefaultValue;             }             if (varValue != null) {                 final int varLen = varValue.length();                 buf.replace(startPos, endPos, varValue);                 altered = true;                 int change = 0;                 if (!substitutionInValuesDisabled) {                     change = substitute(buf, startPos, varLen, priorVariables);                 }                 change = (change + varLen) - (endPos - startPos);                 pos += change;                 bufEnd += change;                 lengthChange += change;                 chars = buf.buffer;             }             priorVariables.remove(((priorVariables.size()) - 1));             break;         }         nestedVarCount--;         pos += endMatchLen;     }     nestedVarCount--;     pos += endMatchLen; }
18	0	1	1
===	0	SWAP_USAGE	if (nestedVarCount == 0) {     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));     if (substitutionInVariablesEnabled) {         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);         substitute(bufName, 0, bufName.length());         varNameExpr = bufName.toString();     }     pos += endMatchLen;     final int endPos = pos;     java.lang.String varName = varNameExpr;     java.lang.String varDefaultValue = null;     if (valueDelimMatcher != null) {         final char[] varNameExprChars = varNameExpr.toCharArray();         int valueDelimiterMatchLen = 0;         for (int i = 0; i < (varNameExprChars.length); i++) {             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                 break;             }             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                 varName = varNameExpr.substring(0, i);                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                 break;             }         }     }     if (priorVariables == null) {         priorVariables = new java.util.ArrayList<>();         priorVariables.add(new java.lang.String(chars, offset, length));     }     checkCyclicSubstitution(varName, priorVariables);     priorVariables.add(varName);     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);     if (varValue == null) {         varValue = varDefaultValue;     }     if (varValue != null) {         final int varLen = varValue.length();         buf.replace(startPos, endPos, varValue);         altered = true;         int change = 0;         if (!substitutionInValuesDisabled) {             change = substitute(buf, startPos, varLen, priorVariables);         }         change = (change + varLen) - (endPos - startPos);         pos += change;         bufEnd += change;         lengthChange += change;         chars = buf.buffer;     }     priorVariables.remove(((priorVariables.size()) - 1));     break; }	while (pos < bufEnd) {     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);         nestedVarCount++;         pos += endMatchLen;         continue;     }     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);     if (endMatchLen == 0) {         pos++;     }else {         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }          nestedVarCount--;         pos += endMatchLen;     } } 
19	13	3	3
===	0	DELETE_CONTROL	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }
===	1	MUTATE_CONDITION	pos < bufEnd	false
===	2	MUTATE_CONDITION	pos < bufEnd	varValue != null
20	0	1	1
===	0	SWAP_USAGE	if (nestedVarCount == 0) {     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));     if (substitutionInVariablesEnabled) {         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);         substitute(bufName, 0, bufName.length());         varNameExpr = bufName.toString();     }     pos += endMatchLen;     final int endPos = pos;     java.lang.String varName = varNameExpr;     java.lang.String varDefaultValue = null;     if (valueDelimMatcher != null) {         final char[] varNameExprChars = varNameExpr.toCharArray();         int valueDelimiterMatchLen = 0;         for (int i = 0; i < (varNameExprChars.length); i++) {             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                 break;             }             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                 varName = varNameExpr.substring(0, i);                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                 break;             }         }     }     if (priorVariables == null) {         priorVariables = new java.util.ArrayList<>();         priorVariables.add(new java.lang.String(chars, offset, length));     }     checkCyclicSubstitution(varName, priorVariables);     priorVariables.add(varName);     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);     if (varValue == null) {         varValue = varDefaultValue;     }     if (varValue != null) {         final int varLen = varValue.length();         buf.replace(startPos, endPos, varValue);         altered = true;         int change = 0;         if (!substitutionInValuesDisabled) {             change = substitute(buf, startPos, varLen, priorVariables);         }         change = (change + varLen) - (endPos - startPos);         pos += change;         bufEnd += change;         lengthChange += change;         chars = buf.buffer;     }     priorVariables.remove(((priorVariables.size()) - 1));     break; }	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {             if (this.preserveEscapes) {                 pos++;                 continue;             }             buf.deleteCharAt((pos - 1));             chars = buf.buffer;             lengthChange--;             altered = true;             bufEnd--;         }else {             final int startPos = pos;             pos += startMatchLen;             int endMatchLen = 0;             int nestedVarCount = 0;             while (pos < bufEnd) {                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     nestedVarCount++;                     pos += endMatchLen;                     continue;                 }                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                 if (endMatchLen == 0) {                     pos++;                 }else {                     while (pos < bufEnd) {                         final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                         if (startMatchLen == 0) {                             pos++;                         }else {                             if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {                                 if (this.preserveEscapes) {                                     pos++;                                     continue;                                 }                                 buf.deleteCharAt((pos - 1));                                 chars = buf.buffer;                                 lengthChange--;                                 altered = true;                                 bufEnd--;                             }else {                                 final int startPos = pos;                                 pos += startMatchLen;                                 int endMatchLen = 0;                                 int nestedVarCount = 0;                                 while (pos < bufEnd) {                                     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                                         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                                         nestedVarCount++;                                         pos += endMatchLen;                                         continue;                                     }                                     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                                     if (endMatchLen == 0) {                                         pos++;                                     }else {                                         if (nestedVarCount == 0) {                                             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                                             if (substitutionInVariablesEnabled) {                                                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                                                 substitute(bufName, 0, bufName.length());                                                 varNameExpr = bufName.toString();                                             }                                             pos += endMatchLen;                                             final int endPos = pos;                                             java.lang.String varName = varNameExpr;                                             java.lang.String varDefaultValue = null;                                             if (valueDelimMatcher != null) {                                                 final char[] varNameExprChars = varNameExpr.toCharArray();                                                 int valueDelimiterMatchLen = 0;                                                 for (int i = 0; i < (varNameExprChars.length); i++) {                                                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                                         break;                                                     }                                                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                                         varName = varNameExpr.substring(0, i);                                                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                                         break;                                                     }                                                 }                                             }                                             if (priorVariables == null) {                                                 priorVariables = new java.util.ArrayList<>();                                                 priorVariables.add(new java.lang.String(chars, offset, length));                                             }                                             checkCyclicSubstitution(varName, priorVariables);                                             priorVariables.add(varName);                                             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                                             if (varValue == null) {                                                 varValue = varDefaultValue;                                             }                                             if (varValue != null) {                                                 final int varLen = varValue.length();                                                 buf.replace(startPos, endPos, varValue);                                                 altered = true;                                                 int change = 0;                                                 if (!substitutionInValuesDisabled) {                                                     change = substitute(buf, startPos, varLen, priorVariables);                                                 }                                                 change = (change + varLen) - (endPos - startPos);                                                 pos += change;                                                 bufEnd += change;                                                 lengthChange += change;                                                 chars = buf.buffer;                                             }                                             priorVariables.remove(((priorVariables.size()) - 1));                                             break;                                         }                                         nestedVarCount--;                                         pos += endMatchLen;                                     }                                 }                              }                         }                     }                      nestedVarCount--;                     pos += endMatchLen;                 }             }          }     } } 
21	0	1	1
===	0	DELETE_USAGE	(priorVariables.size())
22	12	3	3
===	0	DELETE_USAGE	priorVariables.add(varName)
===	1	SWAP_USAGE	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (startMatchLen == 0) {                 pos++;             }else {                 if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {                     if (this.preserveEscapes) {                         pos++;                         continue;                     }                     buf.deleteCharAt((pos - 1));                     chars = buf.buffer;                     lengthChange--;                     altered = true;                     bufEnd--;                 }else {                     final int startPos = pos;                     pos += startMatchLen;                     int endMatchLen = 0;                     int nestedVarCount = 0;                     while (pos < bufEnd) {                         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                             nestedVarCount++;                             pos += endMatchLen;                             continue;                         }                         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                         if (endMatchLen == 0) {                             pos++;                         }else {                             if (nestedVarCount == 0) {                                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                                 if (substitutionInVariablesEnabled) {                                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                                     substitute(bufName, 0, bufName.length());                                     varNameExpr = bufName.toString();                                 }                                 pos += endMatchLen;                                 final int endPos = pos;                                 java.lang.String varName = varNameExpr;                                 java.lang.String varDefaultValue = null;                                 if (valueDelimMatcher != null) {                                     final char[] varNameExprChars = varNameExpr.toCharArray();                                     int valueDelimiterMatchLen = 0;                                     for (int i = 0; i < (varNameExprChars.length); i++) {                                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                             break;                                         }                                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                             varName = varNameExpr.substring(0, i);                                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                             break;                                         }                                     }                                 }                                 if (priorVariables == null) {                                     priorVariables = new java.util.ArrayList<>();                                     priorVariables.add(new java.lang.String(chars, offset, length));                                 }                                 checkCyclicSubstitution(varName, priorVariables);                                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                                 if (varValue == null) {                                     varValue = varDefaultValue;                                 }                                 if (varValue != null) {                                     final int varLen = varValue.length();                                     buf.replace(startPos, endPos, varValue);                                     altered = true;                                     int change = 0;                                     if (!substitutionInValuesDisabled) {                                         change = substitute(buf, startPos, varLen, priorVariables);                                     }                                     change = (change + varLen) - (endPos - startPos);                                     pos += change;                                     bufEnd += change;                                     lengthChange += change;                                     chars = buf.buffer;                                 }                                 priorVariables.remove(((priorVariables.size()) - 1));                                 break;                             }                             nestedVarCount--;                             pos += endMatchLen;                         }                     }                  }             }         }      } }	if (endMatchLen == 0) {     pos++; }else {     if (nestedVarCount == 0) {         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));         if (substitutionInVariablesEnabled) {             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);             substitute(bufName, 0, bufName.length());             varNameExpr = bufName.toString();         }         pos += endMatchLen;         final int endPos = pos;         java.lang.String varName = varNameExpr;         java.lang.String varDefaultValue = null;         if (valueDelimMatcher != null) {             final char[] varNameExprChars = varNameExpr.toCharArray();             int valueDelimiterMatchLen = 0;             for (int i = 0; i < (varNameExprChars.length); i++) {                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                     break;                 }                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                     varName = varNameExpr.substring(0, i);                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                     break;                 }             }         }         if (priorVariables == null) {             priorVariables = new java.util.ArrayList<>();             priorVariables.add(new java.lang.String(chars, offset, length));         }         checkCyclicSubstitution(varName, priorVariables);         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);         if (varValue == null) {             varValue = varDefaultValue;         }         if (varValue != null) {             final int varLen = varValue.length();             buf.replace(startPos, endPos, varValue);             altered = true;             int change = 0;             if (!substitutionInValuesDisabled) {                 change = substitute(buf, startPos, varLen, priorVariables);             }             change = (change + varLen) - (endPos - startPos);             pos += change;             bufEnd += change;             lengthChange += change;             chars = buf.buffer;         }         priorVariables.remove(((priorVariables.size()) - 1));         break;     }     nestedVarCount--;     pos += endMatchLen; }
===	2	SWAP_USAGE	if (nestedVarCount == 0) {     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));     if (substitutionInVariablesEnabled) {         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);         substitute(bufName, 0, bufName.length());         varNameExpr = bufName.toString();     }     pos += endMatchLen;     final int endPos = pos;     java.lang.String varName = varNameExpr;     java.lang.String varDefaultValue = null;     if (valueDelimMatcher != null) {         final char[] varNameExprChars = varNameExpr.toCharArray();         int valueDelimiterMatchLen = 0;         for (int i = 0; i < (varNameExprChars.length); i++) {             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                 break;             }             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                 varName = varNameExpr.substring(0, i);                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                 break;             }         }     }     if (priorVariables == null) {         priorVariables = new java.util.ArrayList<>();         priorVariables.add(new java.lang.String(chars, offset, length));     }     checkCyclicSubstitution(varName, priorVariables);     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);     if (varValue == null) {         varValue = varDefaultValue;     }     if (varValue != null) {         final int varLen = varValue.length();         buf.replace(startPos, endPos, varValue);         altered = true;         int change = 0;         if (!substitutionInValuesDisabled) {             change = substitute(buf, startPos, varLen, priorVariables);         }         change = (change + varLen) - (endPos - startPos);         pos += change;         bufEnd += change;         lengthChange += change;         chars = buf.buffer;     }     priorVariables.remove(((priorVariables.size()) - 1));     break; }	if (endMatchLen == 0) {     pos++; }else {     if (endMatchLen == 0) {         pos++;     }else {         if (nestedVarCount == 0) {             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));             if (substitutionInVariablesEnabled) {                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                 substitute(bufName, 0, bufName.length());                 varNameExpr = bufName.toString();             }             pos += endMatchLen;             final int endPos = pos;             java.lang.String varName = varNameExpr;             java.lang.String varDefaultValue = null;             if (valueDelimMatcher != null) {                 final char[] varNameExprChars = varNameExpr.toCharArray();                 int valueDelimiterMatchLen = 0;                 for (int i = 0; i < (varNameExprChars.length); i++) {                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                         break;                     }                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                         varName = varNameExpr.substring(0, i);                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                         break;                     }                 }             }             if (priorVariables == null) {                 priorVariables = new java.util.ArrayList<>();                 priorVariables.add(new java.lang.String(chars, offset, length));             }             checkCyclicSubstitution(varName, priorVariables);             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);             if (varValue == null) {                 varValue = varDefaultValue;             }             if (varValue != null) {                 final int varLen = varValue.length();                 buf.replace(startPos, endPos, varValue);                 altered = true;                 int change = 0;                 if (!substitutionInValuesDisabled) {                     change = substitute(buf, startPos, varLen, priorVariables);                 }                 change = (change + varLen) - (endPos - startPos);                 pos += change;                 bufEnd += change;                 lengthChange += change;                 chars = buf.buffer;             }             priorVariables.remove(((priorVariables.size()) - 1));             break;         }         nestedVarCount--;         pos += endMatchLen;     }     nestedVarCount--;     pos += endMatchLen; }
23	21	2	2
===	0	DELETE_USAGE	(priorVariables.size())
===	1	SWAP_USAGE	while (pos < bufEnd) {     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);         nestedVarCount++;         pos += endMatchLen;         continue;     }     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);     if (endMatchLen == 0) {         pos++;     }else {         if (nestedVarCount == 0) {             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));             if (substitutionInVariablesEnabled) {                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                 substitute(bufName, 0, bufName.length());                 varNameExpr = bufName.toString();             }             pos += endMatchLen;             final int endPos = pos;             java.lang.String varName = varNameExpr;             java.lang.String varDefaultValue = null;             if (valueDelimMatcher != null) {                 final char[] varNameExprChars = varNameExpr.toCharArray();                 int valueDelimiterMatchLen = 0;                 for (int i = 0; i < (varNameExprChars.length); i++) {                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                         break;                     }                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                         varName = varNameExpr.substring(0, i);                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                         break;                     }                 }             }             if (priorVariables == null) {                 priorVariables = new java.util.ArrayList<>();                 priorVariables.add(new java.lang.String(chars, offset, length));             }             checkCyclicSubstitution(varName, priorVariables);             priorVariables.add(varName);             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);             if (varValue == null) {                 varValue = varDefaultValue;             }             if (varValue != null) {                 final int varLen = varValue.length();                 buf.replace(startPos, endPos, varValue);                 altered = true;                 int change = 0;                 if (!substitutionInValuesDisabled) {                     change = substitute(buf, startPos, varLen, priorVariables);                 }                 change = (change + varLen) - (endPos - startPos);                 pos += change;                 bufEnd += change;                 lengthChange += change;                 chars = buf.buffer;             }             priorVariables.remove(( - 1));             break;         }         nestedVarCount--;         pos += endMatchLen;     } } 	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         if (startMatchLen == 0) {             pos++;         }else {             if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {                 if (this.preserveEscapes) {                     pos++;                     continue;                 }                 buf.deleteCharAt((pos - 1));                 chars = buf.buffer;                 lengthChange--;                 altered = true;                 bufEnd--;             }else {                 final int startPos = pos;                 pos += startMatchLen;                 int endMatchLen = 0;                 int nestedVarCount = 0;                 while (pos < bufEnd) {                     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                         nestedVarCount++;                         pos += endMatchLen;                         continue;                     }                     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                     if (endMatchLen == 0) {                         pos++;                     }else {                         if (nestedVarCount == 0) {                             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                             if (substitutionInVariablesEnabled) {                                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                                 substitute(bufName, 0, bufName.length());                                 varNameExpr = bufName.toString();                             }                             pos += endMatchLen;                             final int endPos = pos;                             java.lang.String varName = varNameExpr;                             java.lang.String varDefaultValue = null;                             if (valueDelimMatcher != null) {                                 final char[] varNameExprChars = varNameExpr.toCharArray();                                 int valueDelimiterMatchLen = 0;                                 for (int i = 0; i < (varNameExprChars.length); i++) {                                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                         break;                                     }                                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                         varName = varNameExpr.substring(0, i);                                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                         break;                                     }                                 }                             }                             if (priorVariables == null) {                                 priorVariables = new java.util.ArrayList<>();                                 priorVariables.add(new java.lang.String(chars, offset, length));                             }                             checkCyclicSubstitution(varName, priorVariables);                             priorVariables.add(varName);                             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                             if (varValue == null) {                                 varValue = varDefaultValue;                             }                             if (varValue != null) {                                 final int varLen = varValue.length();                                 buf.replace(startPos, endPos, varValue);                                 altered = true;                                 int change = 0;                                 if (!substitutionInValuesDisabled) {                                     change = substitute(buf, startPos, varLen, priorVariables);                                 }                                 change = (change + varLen) - (endPos - startPos);                                 pos += change;                                 bufEnd += change;                                 lengthChange += change;                                 chars = buf.buffer;                             }                             priorVariables.remove(( - 1));                             break;                         }                         nestedVarCount--;                         pos += endMatchLen;                     }                 }              }         }     } }
24	0	1	1
===	0	SWAP_USAGE	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {             if (this.preserveEscapes) {                 pos++;                 continue;             }             buf.deleteCharAt((pos - 1));             chars = buf.buffer;             lengthChange--;             altered = true;             bufEnd--;         }else {             final int startPos = pos;             pos += startMatchLen;             int endMatchLen = 0;             int nestedVarCount = 0;             while (pos < bufEnd) {                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     nestedVarCount++;                     pos += endMatchLen;                     continue;                 }                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                 while (pos < bufEnd) {                     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     if (startMatchLen == 0) {                         pos++;                     }else {                         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {                             if (this.preserveEscapes) {                                 pos++;                                 continue;                             }                             buf.deleteCharAt((pos - 1));                             chars = buf.buffer;                             lengthChange--;                             altered = true;                             bufEnd--;                         }else {                             final int startPos = pos;                             pos += startMatchLen;                             int endMatchLen = 0;                             int nestedVarCount = 0;                             while (pos < bufEnd) {                                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                                     nestedVarCount++;                                     pos += endMatchLen;                                     continue;                                 }                                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                                 if (endMatchLen == 0) {                                     pos++;                                 }else {                                     if (nestedVarCount == 0) {                                         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                                         if (substitutionInVariablesEnabled) {                                             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                                             substitute(bufName, 0, bufName.length());                                             varNameExpr = bufName.toString();                                         }                                         pos += endMatchLen;                                         final int endPos = pos;                                         java.lang.String varName = varNameExpr;                                         java.lang.String varDefaultValue = null;                                         if (valueDelimMatcher != null) {                                             final char[] varNameExprChars = varNameExpr.toCharArray();                                             int valueDelimiterMatchLen = 0;                                             for (int i = 0; i < (varNameExprChars.length); i++) {                                                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                                     break;                                                 }                                                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                                     varName = varNameExpr.substring(0, i);                                                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                                     break;                                                 }                                             }                                         }                                         if (priorVariables == null) {                                             priorVariables = new java.util.ArrayList<>();                                             priorVariables.add(new java.lang.String(chars, offset, length));                                         }                                         checkCyclicSubstitution(varName, priorVariables);                                         priorVariables.add(varName);                                         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                                         if (varValue == null) {                                             varValue = varDefaultValue;                                         }                                         if (varValue != null) {                                             final int varLen = varValue.length();                                             buf.replace(startPos, endPos, varValue);                                             altered = true;                                             int change = 0;                                             if (!substitutionInValuesDisabled) {                                                 change = substitute(buf, startPos, varLen, priorVariables);                                             }                                             change = (change + varLen) - (endPos - startPos);                                             pos += change;                                             bufEnd += change;                                             lengthChange += change;                                             chars = buf.buffer;                                         }                                         priorVariables.remove(((priorVariables.size()) - 1));                                         break;                                     }                                     nestedVarCount--;                                     pos += endMatchLen;                                 }                             }                          }                     }                 }              }          }     } } 	if (endMatchLen == 0) {     pos++; }else {     if (nestedVarCount == 0) {         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));         if (substitutionInVariablesEnabled) {             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);             substitute(bufName, 0, bufName.length());             varNameExpr = bufName.toString();         }         pos += endMatchLen;         final int endPos = pos;         java.lang.String varName = varNameExpr;         java.lang.String varDefaultValue = null;         if (valueDelimMatcher != null) {             final char[] varNameExprChars = varNameExpr.toCharArray();             int valueDelimiterMatchLen = 0;             for (int i = 0; i < (varNameExprChars.length); i++) {                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                     break;                 }                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                     varName = varNameExpr.substring(0, i);                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                     break;                 }             }         }         if (priorVariables == null) {             priorVariables = new java.util.ArrayList<>();             priorVariables.add(new java.lang.String(chars, offset, length));         }         checkCyclicSubstitution(varName, priorVariables);         priorVariables.add(varName);         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);         if (varValue == null) {             varValue = varDefaultValue;         }         if (varValue != null) {             final int varLen = varValue.length();             buf.replace(startPos, endPos, varValue);             altered = true;             int change = 0;             if (!substitutionInValuesDisabled) {                 change = substitute(buf, startPos, varLen, priorVariables);             }             change = (change + varLen) - (endPos - startPos);             pos += change;             bufEnd += change;             lengthChange += change;             chars = buf.buffer;         }         priorVariables.remove(((priorVariables.size()) - 1));         break;     }     nestedVarCount--;     pos += endMatchLen; }
25	10	2	2
===	0	DELETE_CONTROL	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }
===	1	DELETE_CONTROL	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }
26	21	2	2
===	0	DELETE_USAGE	(priorVariables.size())
===	1	MUTATE_CONDITION	(pos > offset) && ((chars[(pos - 1)]) == escape)	nestedVarCount == 0
27	4	2	2
===	0	DELETE_CONTROL	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {             if (this.preserveEscapes) {                 pos++;                 continue;             }             buf.deleteCharAt((pos - 1));             chars = buf.buffer;             lengthChange--;             altered = true;             bufEnd--;         }else {             final int startPos = pos;             pos += startMatchLen;             int endMatchLen = 0;             int nestedVarCount = 0;             while (pos < bufEnd) {                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     nestedVarCount++;                     pos += endMatchLen;                     continue;                 }                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                 if (endMatchLen == 0) {                     pos++;                 }else {                     if (nestedVarCount == 0) {                         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                         if (substitutionInVariablesEnabled) {                             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                             substitute(bufName, 0, bufName.length());                             varNameExpr = bufName.toString();                         }                         pos += endMatchLen;                         final int endPos = pos;                         java.lang.String varName = varNameExpr;                         java.lang.String varDefaultValue = null;                         if (valueDelimMatcher != null) {                             final char[] varNameExprChars = varNameExpr.toCharArray();                             int valueDelimiterMatchLen = 0;                             for (int i = 0; i < (varNameExprChars.length); i++) {                                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                     break;                                 }                                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                     varName = varNameExpr.substring(0, i);                                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                     break;                                 }                             }                         }                         if (priorVariables == null) {                             priorVariables = new java.util.ArrayList<>();                             priorVariables.add(new java.lang.String(chars, offset, length));                         }                         checkCyclicSubstitution(varName, priorVariables);                         priorVariables.add(varName);                         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                         if (varValue == null) {                             varValue = varDefaultValue;                         }                         if (varValue != null) {                             final int varLen = varValue.length();                             buf.replace(startPos, endPos, varValue);                             altered = true;                             int change = 0;                             if (!substitutionInValuesDisabled) {                                 change = substitute(buf, startPos, varLen, priorVariables);                             }                             change = (change + varLen) - (endPos - startPos);                             pos += change;                             bufEnd += change;                             lengthChange += change;                             chars = buf.buffer;                         }                         priorVariables.remove(((priorVariables.size()) - 1));                         break;                     }                     nestedVarCount--;                     pos += endMatchLen;                 }             }          }     } } 	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {             if (this.preserveEscapes) {                 pos++;                 continue;             }             buf.deleteCharAt((pos - 1));             chars = buf.buffer;             lengthChange--;             altered = true;             bufEnd--;         }else {             final int startPos = pos;             pos += startMatchLen;             int endMatchLen = 0;             int nestedVarCount = 0;             while (pos < bufEnd) {                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     nestedVarCount++;                     pos += endMatchLen;                     continue;                 }                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                 if (endMatchLen == 0) {                     pos++;                 }else {                     if (nestedVarCount == 0) {                         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                         if (substitutionInVariablesEnabled) {                             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                             substitute(bufName, 0, bufName.length());                             varNameExpr = bufName.toString();                         }                         pos += endMatchLen;                         final int endPos = pos;                         java.lang.String varName = varNameExpr;                         java.lang.String varDefaultValue = null;                         if (valueDelimMatcher != null) {                             final char[] varNameExprChars = varNameExpr.toCharArray();                             int valueDelimiterMatchLen = 0;                             for (int i = 0; i < (varNameExprChars.length); i++) {                                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                     break;                                 }                                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                     varName = varNameExpr.substring(0, i);                                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                     break;                                 }                             }                         }                         if (priorVariables == null) {                             priorVariables = new java.util.ArrayList<>();                             priorVariables.add(new java.lang.String(chars, offset, length));                         }                         checkCyclicSubstitution(varName, priorVariables);                         priorVariables.add(varName);                         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                         if (varValue == null) {                             varValue = varDefaultValue;                         }                         if (varValue != null) {                             final int varLen = varValue.length();                             buf.replace(startPos, endPos, varValue);                             altered = true;                             int change = 0;                             if (!substitutionInValuesDisabled) {                                 change = substitute(buf, startPos, varLen, priorVariables);                             }                             change = (change + varLen) - (endPos - startPos);                             pos += change;                             bufEnd += change;                             lengthChange += change;                             chars = buf.buffer;                         }                         priorVariables.remove(((priorVariables.size()) - 1));                         break;                     }                     nestedVarCount--;                     pos += endMatchLen;                 }             }          }     } } 
===	1	DELETE_USAGE	priorVariables.add(varName)
28	0	1	1
===	0	SWAP_USAGE	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         if (startMatchLen == 0) {             pos++;         }else {             if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {                 if (this.preserveEscapes) {                     pos++;                     continue;                 }                 buf.deleteCharAt((pos - 1));                 chars = buf.buffer;                 lengthChange--;                 altered = true;                 bufEnd--;             }else {                 final int startPos = pos;                 pos += startMatchLen;                 int endMatchLen = 0;                 int nestedVarCount = 0;                 while (pos < bufEnd) {                     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                         nestedVarCount++;                         pos += endMatchLen;                         continue;                     }                     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                     if (endMatchLen == 0) {                         pos++;                     }else {                         if (nestedVarCount == 0) {                             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                             if (substitutionInVariablesEnabled) {                                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                                 substitute(bufName, 0, bufName.length());                                 varNameExpr = bufName.toString();                             }                             pos += endMatchLen;                             final int endPos = pos;                             java.lang.String varName = varNameExpr;                             java.lang.String varDefaultValue = null;                             if (valueDelimMatcher != null) {                                 final char[] varNameExprChars = varNameExpr.toCharArray();                                 int valueDelimiterMatchLen = 0;                                 for (int i = 0; i < (varNameExprChars.length); i++) {                                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                         break;                                     }                                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                         varName = varNameExpr.substring(0, i);                                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                         break;                                     }                                 }                             }                             if (priorVariables == null) {                                 priorVariables = new java.util.ArrayList<>();                                 priorVariables.add(new java.lang.String(chars, offset, length));                             }                             checkCyclicSubstitution(varName, priorVariables);                             priorVariables.add(varName);                             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                             if (varValue == null) {                                 varValue = varDefaultValue;                             }                             if (varValue != null) {                                 final int varLen = varValue.length();                                 buf.replace(startPos, endPos, varValue);                                 altered = true;                                 int change = 0;                                 if (!substitutionInValuesDisabled) {                                     change = substitute(buf, startPos, varLen, priorVariables);                                 }                                 change = (change + varLen) - (endPos - startPos);                                 pos += change;                                 bufEnd += change;                                 lengthChange += change;                                 chars = buf.buffer;                             }                             priorVariables.remove(((priorVariables.size()) - 1));                             break;                         }                         nestedVarCount--;                         pos += endMatchLen;                     }                 }              }         }     } }	while (pos < bufEnd) {     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);         nestedVarCount++;         pos += endMatchLen;         continue;     }     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);     if (endMatchLen == 0) {         pos++;     }else {         if (nestedVarCount == 0) {             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));             if (substitutionInVariablesEnabled) {                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                 substitute(bufName, 0, bufName.length());                 varNameExpr = bufName.toString();             }             pos += endMatchLen;             final int endPos = pos;             java.lang.String varName = varNameExpr;             java.lang.String varDefaultValue = null;             if (valueDelimMatcher != null) {                 final char[] varNameExprChars = varNameExpr.toCharArray();                 int valueDelimiterMatchLen = 0;                 for (int i = 0; i < (varNameExprChars.length); i++) {                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                         break;                     }                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                         varName = varNameExpr.substring(0, i);                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                         break;                     }                 }             }             if (priorVariables == null) {                 priorVariables = new java.util.ArrayList<>();                 priorVariables.add(new java.lang.String(chars, offset, length));             }             checkCyclicSubstitution(varName, priorVariables);             priorVariables.add(varName);             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);             if (varValue == null) {                 varValue = varDefaultValue;             }             if (varValue != null) {                 final int varLen = varValue.length();                 buf.replace(startPos, endPos, varValue);                 altered = true;                 int change = 0;                 if (!substitutionInValuesDisabled) {                     change = substitute(buf, startPos, varLen, priorVariables);                 }                 change = (change + varLen) - (endPos - startPos);                 pos += change;                 bufEnd += change;                 lengthChange += change;                 chars = buf.buffer;             }             priorVariables.remove(((priorVariables.size()) - 1));             break;         }         nestedVarCount--;         pos += endMatchLen;     } } 
29	10	2	2
===	0	DELETE_CONTROL	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }
===	1	DELETE_USAGE	priorVariables.add(varName)
30	24	2	2
===	0	SWAP_USAGE	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {             if (this.preserveEscapes) {                 pos++;                 continue;             }             buf.deleteCharAt((pos - 1));             chars = buf.buffer;             lengthChange--;             altered = true;             bufEnd--;         }else {             final int startPos = pos;             pos += startMatchLen;             int endMatchLen = 0;             int nestedVarCount = 0;             while (pos < bufEnd) {                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     nestedVarCount++;                     pos += endMatchLen;                     continue;                 }                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                 while (pos < bufEnd) {                     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     if (startMatchLen == 0) {                         pos++;                     }else {                         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {                             if (this.preserveEscapes) {                                 pos++;                                 continue;                             }                             buf.deleteCharAt((pos - 1));                             chars = buf.buffer;                             lengthChange--;                             altered = true;                             bufEnd--;                         }else {                             final int startPos = pos;                             pos += startMatchLen;                             int endMatchLen = 0;                             int nestedVarCount = 0;                             while (pos < bufEnd) {                                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                                     nestedVarCount++;                                     pos += endMatchLen;                                     continue;                                 }                                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                                 if (endMatchLen == 0) {                                     pos++;                                 }else {                                     if (nestedVarCount == 0) {                                         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                                         if (substitutionInVariablesEnabled) {                                             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                                             substitute(bufName, 0, bufName.length());                                             varNameExpr = bufName.toString();                                         }                                         pos += endMatchLen;                                         final int endPos = pos;                                         java.lang.String varName = varNameExpr;                                         java.lang.String varDefaultValue = null;                                         if (valueDelimMatcher != null) {                                             final char[] varNameExprChars = varNameExpr.toCharArray();                                             int valueDelimiterMatchLen = 0;                                             for (int i = 0; i < (varNameExprChars.length); i++) {                                                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                                     break;                                                 }                                                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                                     varName = varNameExpr.substring(0, i);                                                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                                     break;                                                 }                                             }                                         }                                         if (priorVariables == null) {                                             priorVariables = new java.util.ArrayList<>();                                             priorVariables.add(new java.lang.String(chars, offset, length));                                         }                                         checkCyclicSubstitution(varName, priorVariables);                                         priorVariables.add(varName);                                         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                                         if (varValue == null) {                                             varValue = varDefaultValue;                                         }                                         if (varValue != null) {                                             final int varLen = varValue.length();                                             buf.replace(startPos, endPos, varValue);                                             altered = true;                                             int change = 0;                                             if (!substitutionInValuesDisabled) {                                                 change = substitute(buf, startPos, varLen, priorVariables);                                             }                                             change = (change + varLen) - (endPos - startPos);                                             pos += change;                                             bufEnd += change;                                             lengthChange += change;                                             chars = buf.buffer;                                         }                                         priorVariables.remove(((priorVariables.size()) - 1));                                         break;                                     }                                     nestedVarCount--;                                     pos += endMatchLen;                                 }                             }                          }                     }                 }              }          }     } } 	if (endMatchLen == 0) {     pos++; }else {     if (nestedVarCount == 0) {         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));         if (substitutionInVariablesEnabled) {             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);             substitute(bufName, 0, bufName.length());             varNameExpr = bufName.toString();         }         pos += endMatchLen;         final int endPos = pos;         java.lang.String varName = varNameExpr;         java.lang.String varDefaultValue = null;         if (valueDelimMatcher != null) {             final char[] varNameExprChars = varNameExpr.toCharArray();             int valueDelimiterMatchLen = 0;             for (int i = 0; i < (varNameExprChars.length); i++) {                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                     break;                 }                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                     varName = varNameExpr.substring(0, i);                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                     break;                 }             }         }         if (priorVariables == null) {             priorVariables = new java.util.ArrayList<>();             priorVariables.add(new java.lang.String(chars, offset, length));         }         checkCyclicSubstitution(varName, priorVariables);         priorVariables.add(varName);         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);         if (varValue == null) {             varValue = varDefaultValue;         }         if (varValue != null) {             final int varLen = varValue.length();             buf.replace(startPos, endPos, varValue);             altered = true;             int change = 0;             if (!substitutionInValuesDisabled) {                 change = substitute(buf, startPos, varLen, priorVariables);             }             change = (change + varLen) - (endPos - startPos);             pos += change;             bufEnd += change;             lengthChange += change;             chars = buf.buffer;         }         priorVariables.remove(((priorVariables.size()) - 1));         break;     }     nestedVarCount--;     pos += endMatchLen; }
===	1	DELETE_CONTROL	if (endMatchLen == 0) {     pos++; }else {     if (nestedVarCount == 0) {         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));         if (substitutionInVariablesEnabled) {             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);             substitute(bufName, 0, bufName.length());             varNameExpr = bufName.toString();         }         pos += endMatchLen;         final int endPos = pos;         java.lang.String varName = varNameExpr;         java.lang.String varDefaultValue = null;         if (valueDelimMatcher != null) {             final char[] varNameExprChars = varNameExpr.toCharArray();             int valueDelimiterMatchLen = 0;             for (int i = 0; i < (varNameExprChars.length); i++) {                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                     break;                 }                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                     varName = varNameExpr.substring(0, i);                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                     break;                 }             }         }         if (priorVariables == null) {             priorVariables = new java.util.ArrayList<>();             priorVariables.add(new java.lang.String(chars, offset, length));         }         checkCyclicSubstitution(varName, priorVariables);         priorVariables.add(varName);         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);         if (varValue == null) {             varValue = varDefaultValue;         }         if (varValue != null) {             final int varLen = varValue.length();             buf.replace(startPos, endPos, varValue);             altered = true;             int change = 0;             if (!substitutionInValuesDisabled) {                 change = substitute(buf, startPos, varLen, priorVariables);             }             change = (change + varLen) - (endPos - startPos);             pos += change;             bufEnd += change;             lengthChange += change;             chars = buf.buffer;         }         priorVariables.remove(((priorVariables.size()) - 1));         break;     }     nestedVarCount--;     pos += endMatchLen; }	if (endMatchLen == 0) {     pos++; }else {     if (nestedVarCount == 0) {         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));         if (substitutionInVariablesEnabled) {             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);             substitute(bufName, 0, bufName.length());             varNameExpr = bufName.toString();         }         pos += endMatchLen;         final int endPos = pos;         java.lang.String varName = varNameExpr;         java.lang.String varDefaultValue = null;         if (valueDelimMatcher != null) {             final char[] varNameExprChars = varNameExpr.toCharArray();             int valueDelimiterMatchLen = 0;             for (int i = 0; i < (varNameExprChars.length); i++) {                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                     break;                 }                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                     varName = varNameExpr.substring(0, i);                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                     break;                 }             }         }         if (priorVariables == null) {             priorVariables = new java.util.ArrayList<>();             priorVariables.add(new java.lang.String(chars, offset, length));         }         checkCyclicSubstitution(varName, priorVariables);         priorVariables.add(varName);         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);         if (varValue == null) {             varValue = varDefaultValue;         }         if (varValue != null) {             final int varLen = varValue.length();             buf.replace(startPos, endPos, varValue);             altered = true;             int change = 0;             if (!substitutionInValuesDisabled) {                 change = substitute(buf, startPos, varLen, priorVariables);             }             change = (change + varLen) - (endPos - startPos);             pos += change;             bufEnd += change;             lengthChange += change;             chars = buf.buffer;         }         priorVariables.remove(((priorVariables.size()) - 1));         break;     }     nestedVarCount--;     pos += endMatchLen; }
31	25	3	3
===	0	DELETE_CONTROL	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }
===	1	DELETE_CONTROL	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }
===	2	SWAP_USAGE	if (nestedVarCount == 0) {     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));     if (substitutionInVariablesEnabled) {         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);         substitute(bufName, 0, bufName.length());         varNameExpr = bufName.toString();     }     pos += endMatchLen;     final int endPos = pos;     java.lang.String varName = varNameExpr;     java.lang.String varDefaultValue = null;     if (valueDelimMatcher != null) {         final char[] varNameExprChars = varNameExpr.toCharArray();         int valueDelimiterMatchLen = 0;         for (int i = 0; i < (varNameExprChars.length); i++) {             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                 break;             }             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                 varName = varNameExpr.substring(0, i);                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                 break;             }         }     }     if (priorVariables == null) {         priorVariables = new java.util.ArrayList<>();         priorVariables.add(new java.lang.String(chars, offset, length));     }     checkCyclicSubstitution(varName, priorVariables);     priorVariables.add(varName);     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);     if (varValue == null) {         varValue = varDefaultValue;     }     if (varValue != null) {         final int varLen = varValue.length();         buf.replace(startPos, endPos, varValue);         altered = true;         int change = 0;         if (!substitutionInValuesDisabled) {             change = substitute(buf, startPos, varLen, priorVariables);         }         change = (change + varLen) - (endPos - startPos);         pos += change;         bufEnd += change;         lengthChange += change;         chars = buf.buffer;     }     priorVariables.remove(((priorVariables.size()) - 1));     break; }	if (endMatchLen == 0) {     pos++; }else {     if (endMatchLen == 0) {         pos++;     }else {         if (nestedVarCount == 0) {             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));             if (substitutionInVariablesEnabled) {                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                 substitute(bufName, 0, bufName.length());                 varNameExpr = bufName.toString();             }             pos += endMatchLen;             final int endPos = pos;             java.lang.String varName = varNameExpr;             java.lang.String varDefaultValue = null;             if (valueDelimMatcher != null) {                 final char[] varNameExprChars = varNameExpr.toCharArray();                 int valueDelimiterMatchLen = 0;                 for (int i = 0; i < (varNameExprChars.length); i++) {                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                         break;                     }                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                         varName = varNameExpr.substring(0, i);                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                         break;                     }                 }             }             if (priorVariables == null) {                 priorVariables = new java.util.ArrayList<>();                 priorVariables.add(new java.lang.String(chars, offset, length));             }             checkCyclicSubstitution(varName, priorVariables);             priorVariables.add(varName);             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);             if (varValue == null) {                 varValue = varDefaultValue;             }             if (varValue != null) {                 final int varLen = varValue.length();                 buf.replace(startPos, endPos, varValue);                 altered = true;                 int change = 0;                 if (!substitutionInValuesDisabled) {                     change = substitute(buf, startPos, varLen, priorVariables);                 }                 change = (change + varLen) - (endPos - startPos);                 pos += change;                 bufEnd += change;                 lengthChange += change;                 chars = buf.buffer;             }             priorVariables.remove(((priorVariables.size()) - 1));             break;         }         nestedVarCount--;         pos += endMatchLen;     }     nestedVarCount--;     pos += endMatchLen; }
32	21	2	2
===	0	DELETE_USAGE	(priorVariables.size())
===	1	MUTATE_CONDITION	pos < bufEnd	varValue == null
33	0	1	1
===	0	MUTATE_CONDITION	((chars[(pos - 1)]) == escape)	(substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0))
34	23	3	3
===	0	DELETE_USAGE	(priorVariables.size())
===	1	SWAP_USAGE	while (pos < bufEnd) {     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);         nestedVarCount++;         pos += endMatchLen;         continue;     }     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);     if (endMatchLen == 0) {         pos++;     }else {         if (nestedVarCount == 0) {             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));             if (substitutionInVariablesEnabled) {                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                 substitute(bufName, 0, bufName.length());                 varNameExpr = bufName.toString();             }             pos += endMatchLen;             final int endPos = pos;             java.lang.String varName = varNameExpr;             java.lang.String varDefaultValue = null;             if (valueDelimMatcher != null) {                 final char[] varNameExprChars = varNameExpr.toCharArray();                 int valueDelimiterMatchLen = 0;                 for (int i = 0; i < (varNameExprChars.length); i++) {                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                         break;                     }                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                         varName = varNameExpr.substring(0, i);                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                         break;                     }                 }             }             if (priorVariables == null) {                 priorVariables = new java.util.ArrayList<>();                 priorVariables.add(new java.lang.String(chars, offset, length));             }             checkCyclicSubstitution(varName, priorVariables);             priorVariables.add(varName);             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);             if (varValue == null) {                 varValue = varDefaultValue;             }             if (varValue != null) {                 final int varLen = varValue.length();                 buf.replace(startPos, endPos, varValue);                 altered = true;                 int change = 0;                 if (!substitutionInValuesDisabled) {                     change = substitute(buf, startPos, varLen, priorVariables);                 }                 change = (change + varLen) - (endPos - startPos);                 pos += change;                 bufEnd += change;                 lengthChange += change;                 chars = buf.buffer;             }             priorVariables.remove(( - 1));             break;         }         nestedVarCount--;         pos += endMatchLen;     } } 	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         if (startMatchLen == 0) {             pos++;         }else {             if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {                 if (this.preserveEscapes) {                     pos++;                     continue;                 }                 buf.deleteCharAt((pos - 1));                 chars = buf.buffer;                 lengthChange--;                 altered = true;                 bufEnd--;             }else {                 final int startPos = pos;                 pos += startMatchLen;                 int endMatchLen = 0;                 int nestedVarCount = 0;                 while (pos < bufEnd) {                     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                         nestedVarCount++;                         pos += endMatchLen;                         continue;                     }                     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                     if (endMatchLen == 0) {                         pos++;                     }else {                         if (nestedVarCount == 0) {                             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                             if (substitutionInVariablesEnabled) {                                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                                 substitute(bufName, 0, bufName.length());                                 varNameExpr = bufName.toString();                             }                             pos += endMatchLen;                             final int endPos = pos;                             java.lang.String varName = varNameExpr;                             java.lang.String varDefaultValue = null;                             if (valueDelimMatcher != null) {                                 final char[] varNameExprChars = varNameExpr.toCharArray();                                 int valueDelimiterMatchLen = 0;                                 for (int i = 0; i < (varNameExprChars.length); i++) {                                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                         break;                                     }                                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                         varName = varNameExpr.substring(0, i);                                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                         break;                                     }                                 }                             }                             if (priorVariables == null) {                                 priorVariables = new java.util.ArrayList<>();                                 priorVariables.add(new java.lang.String(chars, offset, length));                             }                             checkCyclicSubstitution(varName, priorVariables);                             priorVariables.add(varName);                             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                             if (varValue == null) {                                 varValue = varDefaultValue;                             }                             if (varValue != null) {                                 final int varLen = varValue.length();                                 buf.replace(startPos, endPos, varValue);                                 altered = true;                                 int change = 0;                                 if (!substitutionInValuesDisabled) {                                     change = substitute(buf, startPos, varLen, priorVariables);                                 }                                 change = (change + varLen) - (endPos - startPos);                                 pos += change;                                 bufEnd += change;                                 lengthChange += change;                                 chars = buf.buffer;                             }                             priorVariables.remove(( - 1));                             break;                         }                         nestedVarCount--;                         pos += endMatchLen;                     }                 }              }         }     } }
===	2	SWAP_USAGE	if (endMatchLen == 0) {     pos++; }else {     if (nestedVarCount == 0) {         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));         if (substitutionInVariablesEnabled) {             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);             substitute(bufName, 0, bufName.length());             varNameExpr = bufName.toString();         }         pos += endMatchLen;         final int endPos = pos;         java.lang.String varName = varNameExpr;         java.lang.String varDefaultValue = null;         if (valueDelimMatcher != null) {             final char[] varNameExprChars = varNameExpr.toCharArray();             int valueDelimiterMatchLen = 0;             for (int i = 0; i < (varNameExprChars.length); i++) {                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                     break;                 }                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                     varName = varNameExpr.substring(0, i);                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                     break;                 }             }         }         if (priorVariables == null) {             priorVariables = new java.util.ArrayList<>();             priorVariables.add(new java.lang.String(chars, offset, length));         }         checkCyclicSubstitution(varName, priorVariables);         priorVariables.add(varName);         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);         if (varValue == null) {             varValue = varDefaultValue;         }         if (varValue != null) {             final int varLen = varValue.length();             buf.replace(startPos, endPos, varValue);             altered = true;             int change = 0;             if (!substitutionInValuesDisabled) {                 change = substitute(buf, startPos, varLen, priorVariables);             }             change = (change + varLen) - (endPos - startPos);             pos += change;             bufEnd += change;             lengthChange += change;             chars = buf.buffer;         }         priorVariables.remove(( - 1));         break;     }     nestedVarCount--;     pos += endMatchLen; }	while (pos < bufEnd) {     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);         nestedVarCount++;         pos += endMatchLen;         continue;     }     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(( - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  } 
35	25	3	3
===	0	DELETE_CONTROL	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }
===	1	DELETE_CONTROL	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }
===	2	DELETE_CONTROL	if (nestedVarCount == 0) {     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));     if (substitutionInVariablesEnabled) {         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);         substitute(bufName, 0, bufName.length());         varNameExpr = bufName.toString();     }     pos += endMatchLen;     final int endPos = pos;     java.lang.String varName = varNameExpr;     java.lang.String varDefaultValue = null;     if (valueDelimMatcher != null) {         final char[] varNameExprChars = varNameExpr.toCharArray();         int valueDelimiterMatchLen = 0;         for (int i = 0; i < (varNameExprChars.length); i++) {             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                 break;             }             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                 varName = varNameExpr.substring(0, i);                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                 break;             }         }     }     if (priorVariables == null) {         priorVariables = new java.util.ArrayList<>();         priorVariables.add(new java.lang.String(chars, offset, length));     }     checkCyclicSubstitution(varName, priorVariables);     priorVariables.add(varName);     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);     if (varValue == null) {         varValue = varDefaultValue;     }     if (varValue != null) {         final int varLen = varValue.length();         buf.replace(startPos, endPos, varValue);         altered = true;         int change = 0;         if (!substitutionInValuesDisabled) {             change = substitute(buf, startPos, varLen, priorVariables);         }         change = (change + varLen) - (endPos - startPos);         pos += change;         bufEnd += change;         lengthChange += change;         chars = buf.buffer;     }     priorVariables.remove(((priorVariables.size()) - 1));     break; }	if (nestedVarCount == 0) {     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));     if (substitutionInVariablesEnabled) {         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);         substitute(bufName, 0, bufName.length());         varNameExpr = bufName.toString();     }     pos += endMatchLen;     final int endPos = pos;     java.lang.String varName = varNameExpr;     java.lang.String varDefaultValue = null;     if (valueDelimMatcher != null) {         final char[] varNameExprChars = varNameExpr.toCharArray();         int valueDelimiterMatchLen = 0;         for (int i = 0; i < (varNameExprChars.length); i++) {             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                 break;             }             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                 varName = varNameExpr.substring(0, i);                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                 break;             }         }     }     if (priorVariables == null) {         priorVariables = new java.util.ArrayList<>();         priorVariables.add(new java.lang.String(chars, offset, length));     }     checkCyclicSubstitution(varName, priorVariables);     priorVariables.add(varName);     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);     if (varValue == null) {         varValue = varDefaultValue;     }     if (varValue != null) {         final int varLen = varValue.length();         buf.replace(startPos, endPos, varValue);         altered = true;         int change = 0;         if (!substitutionInValuesDisabled) {             change = substitute(buf, startPos, varLen, priorVariables);         }         change = (change + varLen) - (endPos - startPos);         pos += change;         bufEnd += change;         lengthChange += change;         chars = buf.buffer;     }     priorVariables.remove(((priorVariables.size()) - 1));     break; }
36	23	3	3
===	0	DELETE_USAGE	(priorVariables.size())
===	1	SWAP_USAGE	while (pos < bufEnd) {     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);         nestedVarCount++;         pos += endMatchLen;         continue;     }     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);     if (endMatchLen == 0) {         pos++;     }else {         if (nestedVarCount == 0) {             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));             if (substitutionInVariablesEnabled) {                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                 substitute(bufName, 0, bufName.length());                 varNameExpr = bufName.toString();             }             pos += endMatchLen;             final int endPos = pos;             java.lang.String varName = varNameExpr;             java.lang.String varDefaultValue = null;             if (valueDelimMatcher != null) {                 final char[] varNameExprChars = varNameExpr.toCharArray();                 int valueDelimiterMatchLen = 0;                 for (int i = 0; i < (varNameExprChars.length); i++) {                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                         break;                     }                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                         varName = varNameExpr.substring(0, i);                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                         break;                     }                 }             }             if (priorVariables == null) {                 priorVariables = new java.util.ArrayList<>();                 priorVariables.add(new java.lang.String(chars, offset, length));             }             checkCyclicSubstitution(varName, priorVariables);             priorVariables.add(varName);             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);             if (varValue == null) {                 varValue = varDefaultValue;             }             if (varValue != null) {                 final int varLen = varValue.length();                 buf.replace(startPos, endPos, varValue);                 altered = true;                 int change = 0;                 if (!substitutionInValuesDisabled) {                     change = substitute(buf, startPos, varLen, priorVariables);                 }                 change = (change + varLen) - (endPos - startPos);                 pos += change;                 bufEnd += change;                 lengthChange += change;                 chars = buf.buffer;             }             priorVariables.remove(( - 1));             break;         }         nestedVarCount--;         pos += endMatchLen;     } } 	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         if (startMatchLen == 0) {             pos++;         }else {             if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {                 if (this.preserveEscapes) {                     pos++;                     continue;                 }                 buf.deleteCharAt((pos - 1));                 chars = buf.buffer;                 lengthChange--;                 altered = true;                 bufEnd--;             }else {                 final int startPos = pos;                 pos += startMatchLen;                 int endMatchLen = 0;                 int nestedVarCount = 0;                 while (pos < bufEnd) {                     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                         nestedVarCount++;                         pos += endMatchLen;                         continue;                     }                     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                     if (endMatchLen == 0) {                         pos++;                     }else {                         if (nestedVarCount == 0) {                             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                             if (substitutionInVariablesEnabled) {                                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                                 substitute(bufName, 0, bufName.length());                                 varNameExpr = bufName.toString();                             }                             pos += endMatchLen;                             final int endPos = pos;                             java.lang.String varName = varNameExpr;                             java.lang.String varDefaultValue = null;                             if (valueDelimMatcher != null) {                                 final char[] varNameExprChars = varNameExpr.toCharArray();                                 int valueDelimiterMatchLen = 0;                                 for (int i = 0; i < (varNameExprChars.length); i++) {                                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                         break;                                     }                                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                         varName = varNameExpr.substring(0, i);                                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                         break;                                     }                                 }                             }                             if (priorVariables == null) {                                 priorVariables = new java.util.ArrayList<>();                                 priorVariables.add(new java.lang.String(chars, offset, length));                             }                             checkCyclicSubstitution(varName, priorVariables);                             priorVariables.add(varName);                             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                             if (varValue == null) {                                 varValue = varDefaultValue;                             }                             if (varValue != null) {                                 final int varLen = varValue.length();                                 buf.replace(startPos, endPos, varValue);                                 altered = true;                                 int change = 0;                                 if (!substitutionInValuesDisabled) {                                     change = substitute(buf, startPos, varLen, priorVariables);                                 }                                 change = (change + varLen) - (endPos - startPos);                                 pos += change;                                 bufEnd += change;                                 lengthChange += change;                                 chars = buf.buffer;                             }                             priorVariables.remove(( - 1));                             break;                         }                         nestedVarCount--;                         pos += endMatchLen;                     }                 }              }         }     } }
===	2	DELETE_CONTROL	if (nestedVarCount == 0) {     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));     if (substitutionInVariablesEnabled) {         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);         substitute(bufName, 0, bufName.length());         varNameExpr = bufName.toString();     }     pos += endMatchLen;     final int endPos = pos;     java.lang.String varName = varNameExpr;     java.lang.String varDefaultValue = null;     if (valueDelimMatcher != null) {         final char[] varNameExprChars = varNameExpr.toCharArray();         int valueDelimiterMatchLen = 0;         for (int i = 0; i < (varNameExprChars.length); i++) {             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                 break;             }             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                 varName = varNameExpr.substring(0, i);                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                 break;             }         }     }     if (priorVariables == null) {         priorVariables = new java.util.ArrayList<>();         priorVariables.add(new java.lang.String(chars, offset, length));     }     checkCyclicSubstitution(varName, priorVariables);     priorVariables.add(varName);     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);     if (varValue == null) {         varValue = varDefaultValue;     }     if (varValue != null) {         final int varLen = varValue.length();         buf.replace(startPos, endPos, varValue);         altered = true;         int change = 0;         if (!substitutionInValuesDisabled) {             change = substitute(buf, startPos, varLen, priorVariables);         }         change = (change + varLen) - (endPos - startPos);         pos += change;         bufEnd += change;         lengthChange += change;         chars = buf.buffer;     }     priorVariables.remove(( - 1));     break; }	if (nestedVarCount == 0) {     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));     if (substitutionInVariablesEnabled) {         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);         substitute(bufName, 0, bufName.length());         varNameExpr = bufName.toString();     }     pos += endMatchLen;     final int endPos = pos;     java.lang.String varName = varNameExpr;     java.lang.String varDefaultValue = null;     if (valueDelimMatcher != null) {         final char[] varNameExprChars = varNameExpr.toCharArray();         int valueDelimiterMatchLen = 0;         for (int i = 0; i < (varNameExprChars.length); i++) {             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                 break;             }             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                 varName = varNameExpr.substring(0, i);                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                 break;             }         }     }     if (priorVariables == null) {         priorVariables = new java.util.ArrayList<>();         priorVariables.add(new java.lang.String(chars, offset, length));     }     checkCyclicSubstitution(varName, priorVariables);     priorVariables.add(varName);     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);     if (varValue == null) {         varValue = varDefaultValue;     }     if (varValue != null) {         final int varLen = varValue.length();         buf.replace(startPos, endPos, varValue);         altered = true;         int change = 0;         if (!substitutionInValuesDisabled) {             change = substitute(buf, startPos, varLen, priorVariables);         }         change = (change + varLen) - (endPos - startPos);         pos += change;         bufEnd += change;         lengthChange += change;         chars = buf.buffer;     }     priorVariables.remove(( - 1));     break; }
37	19	4	4
===	0	DELETE_CONTROL	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }
===	1	MUTATE_CONDITION	pos < bufEnd	false
===	2	MUTATE_CONDITION	pos < bufEnd	varValue != null
===	3	DELETE_STRUCTURE	if (endMatchLen == 0) {     pos++; }else {     if (nestedVarCount == 0) {         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));         if (substitutionInVariablesEnabled) {             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);             substitute(bufName, 0, bufName.length());             varNameExpr = bufName.toString();         }         pos += endMatchLen;         final int endPos = pos;         java.lang.String varName = varNameExpr;         java.lang.String varDefaultValue = null;         if (valueDelimMatcher != null) {             final char[] varNameExprChars = varNameExpr.toCharArray();             int valueDelimiterMatchLen = 0;             for (int i = 0; i < (varNameExprChars.length); i++) {                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                     break;                 }                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                     varName = varNameExpr.substring(0, i);                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                     break;                 }             }         }         if (priorVariables == null) {             priorVariables = new java.util.ArrayList<>();             priorVariables.add(new java.lang.String(chars, offset, length));         }         checkCyclicSubstitution(varName, priorVariables);         priorVariables.add(varName);         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);         if (varValue == null) {             varValue = varDefaultValue;         }         if (varValue != null) {             final int varLen = varValue.length();             buf.replace(startPos, endPos, varValue);             altered = true;             int change = 0;             if (!substitutionInValuesDisabled) {                 change = substitute(buf, startPos, varLen, priorVariables);             }             change = (change + varLen) - (endPos - startPos);             pos += change;             bufEnd += change;             lengthChange += change;             chars = buf.buffer;         }         priorVariables.remove(((priorVariables.size()) - 1));         break;     }     nestedVarCount--;     pos += endMatchLen; }
38	0	1	1
===	0	MUTATE_CONDITION	(pos > offset)	(this.preserveEscapes)
39	0	1	1
===	0	MUTATE_CONDITION	pos < bufEnd	endMatchLen == 0
40	0	1	1
===	0	MUTATE_CONDITION	(pos > offset)	substitutionInVariablesEnabled
41	21	2	2
===	0	DELETE_USAGE	(priorVariables.size())
===	1	DELETE_CONTROL	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {             if (this.preserveEscapes) {                 pos++;                 continue;             }             buf.deleteCharAt((pos - 1));             chars = buf.buffer;             lengthChange--;             altered = true;             bufEnd--;         }else {             final int startPos = pos;             pos += startMatchLen;             int endMatchLen = 0;             int nestedVarCount = 0;             while (pos < bufEnd) {                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     nestedVarCount++;                     pos += endMatchLen;                     continue;                 }                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                 if (endMatchLen == 0) {                     pos++;                 }else {                     if (nestedVarCount == 0) {                         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                         if (substitutionInVariablesEnabled) {                             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                             substitute(bufName, 0, bufName.length());                             varNameExpr = bufName.toString();                         }                         pos += endMatchLen;                         final int endPos = pos;                         java.lang.String varName = varNameExpr;                         java.lang.String varDefaultValue = null;                         if (valueDelimMatcher != null) {                             final char[] varNameExprChars = varNameExpr.toCharArray();                             int valueDelimiterMatchLen = 0;                             for (int i = 0; i < (varNameExprChars.length); i++) {                                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                     break;                                 }                                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                     varName = varNameExpr.substring(0, i);                                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                     break;                                 }                             }                         }                         if (priorVariables == null) {                             priorVariables = new java.util.ArrayList<>();                             priorVariables.add(new java.lang.String(chars, offset, length));                         }                         checkCyclicSubstitution(varName, priorVariables);                         priorVariables.add(varName);                         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                         if (varValue == null) {                             varValue = varDefaultValue;                         }                         if (varValue != null) {                             final int varLen = varValue.length();                             buf.replace(startPos, endPos, varValue);                             altered = true;                             int change = 0;                             if (!substitutionInValuesDisabled) {                                 change = substitute(buf, startPos, varLen, priorVariables);                             }                             change = (change + varLen) - (endPos - startPos);                             pos += change;                             bufEnd += change;                             lengthChange += change;                             chars = buf.buffer;                         }                         priorVariables.remove(( - 1));                         break;                     }                     nestedVarCount--;                     pos += endMatchLen;                 }             }          }     } } 	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {             if (this.preserveEscapes) {                 pos++;                 continue;             }             buf.deleteCharAt((pos - 1));             chars = buf.buffer;             lengthChange--;             altered = true;             bufEnd--;         }else {             final int startPos = pos;             pos += startMatchLen;             int endMatchLen = 0;             int nestedVarCount = 0;             while (pos < bufEnd) {                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     nestedVarCount++;                     pos += endMatchLen;                     continue;                 }                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                 if (endMatchLen == 0) {                     pos++;                 }else {                     if (nestedVarCount == 0) {                         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                         if (substitutionInVariablesEnabled) {                             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                             substitute(bufName, 0, bufName.length());                             varNameExpr = bufName.toString();                         }                         pos += endMatchLen;                         final int endPos = pos;                         java.lang.String varName = varNameExpr;                         java.lang.String varDefaultValue = null;                         if (valueDelimMatcher != null) {                             final char[] varNameExprChars = varNameExpr.toCharArray();                             int valueDelimiterMatchLen = 0;                             for (int i = 0; i < (varNameExprChars.length); i++) {                                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                     break;                                 }                                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                     varName = varNameExpr.substring(0, i);                                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                     break;                                 }                             }                         }                         if (priorVariables == null) {                             priorVariables = new java.util.ArrayList<>();                             priorVariables.add(new java.lang.String(chars, offset, length));                         }                         checkCyclicSubstitution(varName, priorVariables);                         priorVariables.add(varName);                         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                         if (varValue == null) {                             varValue = varDefaultValue;                         }                         if (varValue != null) {                             final int varLen = varValue.length();                             buf.replace(startPos, endPos, varValue);                             altered = true;                             int change = 0;                             if (!substitutionInValuesDisabled) {                                 change = substitute(buf, startPos, varLen, priorVariables);                             }                             change = (change + varLen) - (endPos - startPos);                             pos += change;                             bufEnd += change;                             lengthChange += change;                             chars = buf.buffer;                         }                         priorVariables.remove(( - 1));                         break;                     }                     nestedVarCount--;                     pos += endMatchLen;                 }             }          }     } } 
42	0	1	1
===	0	MUTATE_CONDITION	(pos > offset)	(!substitutionInValuesDisabled)
43	30	3	3
===	0	SWAP_USAGE	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {             if (this.preserveEscapes) {                 pos++;                 continue;             }             buf.deleteCharAt((pos - 1));             chars = buf.buffer;             lengthChange--;             altered = true;             bufEnd--;         }else {             final int startPos = pos;             pos += startMatchLen;             int endMatchLen = 0;             int nestedVarCount = 0;             while (pos < bufEnd) {                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     nestedVarCount++;                     pos += endMatchLen;                     continue;                 }                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                 while (pos < bufEnd) {                     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                     if (startMatchLen == 0) {                         pos++;                     }else {                         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {                             if (this.preserveEscapes) {                                 pos++;                                 continue;                             }                             buf.deleteCharAt((pos - 1));                             chars = buf.buffer;                             lengthChange--;                             altered = true;                             bufEnd--;                         }else {                             final int startPos = pos;                             pos += startMatchLen;                             int endMatchLen = 0;                             int nestedVarCount = 0;                             while (pos < bufEnd) {                                 if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                                     endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                                     nestedVarCount++;                                     pos += endMatchLen;                                     continue;                                 }                                 endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                                 if (endMatchLen == 0) {                                     pos++;                                 }else {                                     if (nestedVarCount == 0) {                                         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                                         if (substitutionInVariablesEnabled) {                                             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                                             substitute(bufName, 0, bufName.length());                                             varNameExpr = bufName.toString();                                         }                                         pos += endMatchLen;                                         final int endPos = pos;                                         java.lang.String varName = varNameExpr;                                         java.lang.String varDefaultValue = null;                                         if (valueDelimMatcher != null) {                                             final char[] varNameExprChars = varNameExpr.toCharArray();                                             int valueDelimiterMatchLen = 0;                                             for (int i = 0; i < (varNameExprChars.length); i++) {                                                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                                     break;                                                 }                                                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                                     varName = varNameExpr.substring(0, i);                                                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                                     break;                                                 }                                             }                                         }                                         if (priorVariables == null) {                                             priorVariables = new java.util.ArrayList<>();                                             priorVariables.add(new java.lang.String(chars, offset, length));                                         }                                         checkCyclicSubstitution(varName, priorVariables);                                         priorVariables.add(varName);                                         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                                         if (varValue == null) {                                             varValue = varDefaultValue;                                         }                                         if (varValue != null) {                                             final int varLen = varValue.length();                                             buf.replace(startPos, endPos, varValue);                                             altered = true;                                             int change = 0;                                             if (!substitutionInValuesDisabled) {                                                 change = substitute(buf, startPos, varLen, priorVariables);                                             }                                             change = (change + varLen) - (endPos - startPos);                                             pos += change;                                             bufEnd += change;                                             lengthChange += change;                                             chars = buf.buffer;                                         }                                         priorVariables.remove(((priorVariables.size()) - 1));                                         break;                                     }                                     nestedVarCount--;                                     pos += endMatchLen;                                 }                             }                          }                     }                 }              }          }     } } 	if (endMatchLen == 0) {     pos++; }else {     if (nestedVarCount == 0) {         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));         if (substitutionInVariablesEnabled) {             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);             substitute(bufName, 0, bufName.length());             varNameExpr = bufName.toString();         }         pos += endMatchLen;         final int endPos = pos;         java.lang.String varName = varNameExpr;         java.lang.String varDefaultValue = null;         if (valueDelimMatcher != null) {             final char[] varNameExprChars = varNameExpr.toCharArray();             int valueDelimiterMatchLen = 0;             for (int i = 0; i < (varNameExprChars.length); i++) {                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                     break;                 }                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                     varName = varNameExpr.substring(0, i);                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                     break;                 }             }         }         if (priorVariables == null) {             priorVariables = new java.util.ArrayList<>();             priorVariables.add(new java.lang.String(chars, offset, length));         }         checkCyclicSubstitution(varName, priorVariables);         priorVariables.add(varName);         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);         if (varValue == null) {             varValue = varDefaultValue;         }         if (varValue != null) {             final int varLen = varValue.length();             buf.replace(startPos, endPos, varValue);             altered = true;             int change = 0;             if (!substitutionInValuesDisabled) {                 change = substitute(buf, startPos, varLen, priorVariables);             }             change = (change + varLen) - (endPos - startPos);             pos += change;             bufEnd += change;             lengthChange += change;             chars = buf.buffer;         }         priorVariables.remove(((priorVariables.size()) - 1));         break;     }     nestedVarCount--;     pos += endMatchLen; }
===	1	DELETE_CONTROL	if (endMatchLen == 0) {     pos++; }else {     if (nestedVarCount == 0) {         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));         if (substitutionInVariablesEnabled) {             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);             substitute(bufName, 0, bufName.length());             varNameExpr = bufName.toString();         }         pos += endMatchLen;         final int endPos = pos;         java.lang.String varName = varNameExpr;         java.lang.String varDefaultValue = null;         if (valueDelimMatcher != null) {             final char[] varNameExprChars = varNameExpr.toCharArray();             int valueDelimiterMatchLen = 0;             for (int i = 0; i < (varNameExprChars.length); i++) {                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                     break;                 }                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                     varName = varNameExpr.substring(0, i);                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                     break;                 }             }         }         if (priorVariables == null) {             priorVariables = new java.util.ArrayList<>();             priorVariables.add(new java.lang.String(chars, offset, length));         }         checkCyclicSubstitution(varName, priorVariables);         priorVariables.add(varName);         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);         if (varValue == null) {             varValue = varDefaultValue;         }         if (varValue != null) {             final int varLen = varValue.length();             buf.replace(startPos, endPos, varValue);             altered = true;             int change = 0;             if (!substitutionInValuesDisabled) {                 change = substitute(buf, startPos, varLen, priorVariables);             }             change = (change + varLen) - (endPos - startPos);             pos += change;             bufEnd += change;             lengthChange += change;             chars = buf.buffer;         }         priorVariables.remove(((priorVariables.size()) - 1));         break;     }     nestedVarCount--;     pos += endMatchLen; }	if (endMatchLen == 0) {     pos++; }else {     if (nestedVarCount == 0) {         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));         if (substitutionInVariablesEnabled) {             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);             substitute(bufName, 0, bufName.length());             varNameExpr = bufName.toString();         }         pos += endMatchLen;         final int endPos = pos;         java.lang.String varName = varNameExpr;         java.lang.String varDefaultValue = null;         if (valueDelimMatcher != null) {             final char[] varNameExprChars = varNameExpr.toCharArray();             int valueDelimiterMatchLen = 0;             for (int i = 0; i < (varNameExprChars.length); i++) {                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                     break;                 }                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                     varName = varNameExpr.substring(0, i);                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                     break;                 }             }         }         if (priorVariables == null) {             priorVariables = new java.util.ArrayList<>();             priorVariables.add(new java.lang.String(chars, offset, length));         }         checkCyclicSubstitution(varName, priorVariables);         priorVariables.add(varName);         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);         if (varValue == null) {             varValue = varDefaultValue;         }         if (varValue != null) {             final int varLen = varValue.length();             buf.replace(startPos, endPos, varValue);             altered = true;             int change = 0;             if (!substitutionInValuesDisabled) {                 change = substitute(buf, startPos, varLen, priorVariables);             }             change = (change + varLen) - (endPos - startPos);             pos += change;             bufEnd += change;             lengthChange += change;             chars = buf.buffer;         }         priorVariables.remove(((priorVariables.size()) - 1));         break;     }     nestedVarCount--;     pos += endMatchLen; }
===	2	DELETE_CONTROL	if (nestedVarCount == 0) {     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));     if (substitutionInVariablesEnabled) {         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);         substitute(bufName, 0, bufName.length());         varNameExpr = bufName.toString();     }     pos += endMatchLen;     final int endPos = pos;     java.lang.String varName = varNameExpr;     java.lang.String varDefaultValue = null;     if (valueDelimMatcher != null) {         final char[] varNameExprChars = varNameExpr.toCharArray();         int valueDelimiterMatchLen = 0;         for (int i = 0; i < (varNameExprChars.length); i++) {             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                 break;             }             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                 varName = varNameExpr.substring(0, i);                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                 break;             }         }     }     if (priorVariables == null) {         priorVariables = new java.util.ArrayList<>();         priorVariables.add(new java.lang.String(chars, offset, length));     }     checkCyclicSubstitution(varName, priorVariables);     priorVariables.add(varName);     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);     if (varValue == null) {         varValue = varDefaultValue;     }     if (varValue != null) {         final int varLen = varValue.length();         buf.replace(startPos, endPos, varValue);         altered = true;         int change = 0;         if (!substitutionInValuesDisabled) {             change = substitute(buf, startPos, varLen, priorVariables);         }         change = (change + varLen) - (endPos - startPos);         pos += change;         bufEnd += change;         lengthChange += change;         chars = buf.buffer;     }     priorVariables.remove(((priorVariables.size()) - 1));     break; }	if (nestedVarCount == 0) {     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));     if (substitutionInVariablesEnabled) {         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);         substitute(bufName, 0, bufName.length());         varNameExpr = bufName.toString();     }     pos += endMatchLen;     final int endPos = pos;     java.lang.String varName = varNameExpr;     java.lang.String varDefaultValue = null;     if (valueDelimMatcher != null) {         final char[] varNameExprChars = varNameExpr.toCharArray();         int valueDelimiterMatchLen = 0;         for (int i = 0; i < (varNameExprChars.length); i++) {             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                 break;             }             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                 varName = varNameExpr.substring(0, i);                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                 break;             }         }     }     if (priorVariables == null) {         priorVariables = new java.util.ArrayList<>();         priorVariables.add(new java.lang.String(chars, offset, length));     }     checkCyclicSubstitution(varName, priorVariables);     priorVariables.add(varName);     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);     if (varValue == null) {         varValue = varDefaultValue;     }     if (varValue != null) {         final int varLen = varValue.length();         buf.replace(startPos, endPos, varValue);         altered = true;         int change = 0;         if (!substitutionInValuesDisabled) {             change = substitute(buf, startPos, varLen, priorVariables);         }         change = (change + varLen) - (endPos - startPos);         pos += change;         bufEnd += change;         lengthChange += change;         chars = buf.buffer;     }     priorVariables.remove(((priorVariables.size()) - 1));     break; }
44	15	2	2
===	0	DELETE_CONTROL	while (pos < bufEnd) {     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);         nestedVarCount++;         pos += endMatchLen;         continue;     }     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);     if (endMatchLen == 0) {         pos++;     }else {         if (nestedVarCount == 0) {             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));             if (substitutionInVariablesEnabled) {                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                 substitute(bufName, 0, bufName.length());                 varNameExpr = bufName.toString();             }             pos += endMatchLen;             final int endPos = pos;             java.lang.String varName = varNameExpr;             java.lang.String varDefaultValue = null;             if (valueDelimMatcher != null) {                 final char[] varNameExprChars = varNameExpr.toCharArray();                 int valueDelimiterMatchLen = 0;                 for (int i = 0; i < (varNameExprChars.length); i++) {                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                         break;                     }                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                         varName = varNameExpr.substring(0, i);                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                         break;                     }                 }             }             if (priorVariables == null) {                 priorVariables = new java.util.ArrayList<>();                 priorVariables.add(new java.lang.String(chars, offset, length));             }             checkCyclicSubstitution(varName, priorVariables);             priorVariables.add(varName);             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);             if (varValue == null) {                 varValue = varDefaultValue;             }             if (varValue != null) {                 final int varLen = varValue.length();                 buf.replace(startPos, endPos, varValue);                 altered = true;                 int change = 0;                 if (!substitutionInValuesDisabled) {                     change = substitute(buf, startPos, varLen, priorVariables);                 }                 change = (change + varLen) - (endPos - startPos);                 pos += change;                 bufEnd += change;                 lengthChange += change;                 chars = buf.buffer;             }             priorVariables.remove(((priorVariables.size()) - 1));             break;         }         nestedVarCount--;         pos += endMatchLen;     } } 	while (pos < bufEnd) {     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);         nestedVarCount++;         pos += endMatchLen;         continue;     }     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);     if (endMatchLen == 0) {         pos++;     }else {         if (nestedVarCount == 0) {             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));             if (substitutionInVariablesEnabled) {                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                 substitute(bufName, 0, bufName.length());                 varNameExpr = bufName.toString();             }             pos += endMatchLen;             final int endPos = pos;             java.lang.String varName = varNameExpr;             java.lang.String varDefaultValue = null;             if (valueDelimMatcher != null) {                 final char[] varNameExprChars = varNameExpr.toCharArray();                 int valueDelimiterMatchLen = 0;                 for (int i = 0; i < (varNameExprChars.length); i++) {                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                         break;                     }                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                         varName = varNameExpr.substring(0, i);                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                         break;                     }                 }             }             if (priorVariables == null) {                 priorVariables = new java.util.ArrayList<>();                 priorVariables.add(new java.lang.String(chars, offset, length));             }             checkCyclicSubstitution(varName, priorVariables);             priorVariables.add(varName);             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);             if (varValue == null) {                 varValue = varDefaultValue;             }             if (varValue != null) {                 final int varLen = varValue.length();                 buf.replace(startPos, endPos, varValue);                 altered = true;                 int change = 0;                 if (!substitutionInValuesDisabled) {                     change = substitute(buf, startPos, varLen, priorVariables);                 }                 change = (change + varLen) - (endPos - startPos);                 pos += change;                 bufEnd += change;                 lengthChange += change;                 chars = buf.buffer;             }             priorVariables.remove(((priorVariables.size()) - 1));             break;         }         nestedVarCount--;         pos += endMatchLen;     } } 
===	1	SWAP_USAGE	if (endMatchLen == 0) {     pos++; }else {     if (nestedVarCount == 0) {         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));         if (substitutionInVariablesEnabled) {             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);             substitute(bufName, 0, bufName.length());             varNameExpr = bufName.toString();         }         pos += endMatchLen;         final int endPos = pos;         java.lang.String varName = varNameExpr;         java.lang.String varDefaultValue = null;         if (valueDelimMatcher != null) {             final char[] varNameExprChars = varNameExpr.toCharArray();             int valueDelimiterMatchLen = 0;             for (int i = 0; i < (varNameExprChars.length); i++) {                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                     break;                 }                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                     varName = varNameExpr.substring(0, i);                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                     break;                 }             }         }         if (priorVariables == null) {             priorVariables = new java.util.ArrayList<>();             priorVariables.add(new java.lang.String(chars, offset, length));         }         checkCyclicSubstitution(varName, priorVariables);         priorVariables.add(varName);         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);         if (varValue == null) {             varValue = varDefaultValue;         }         if (varValue != null) {             final int varLen = varValue.length();             buf.replace(startPos, endPos, varValue);             altered = true;             int change = 0;             if (!substitutionInValuesDisabled) {                 change = substitute(buf, startPos, varLen, priorVariables);             }             change = (change + varLen) - (endPos - startPos);             pos += change;             bufEnd += change;             lengthChange += change;             chars = buf.buffer;         }         priorVariables.remove(((priorVariables.size()) - 1));         break;     }     nestedVarCount--;     pos += endMatchLen; }	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {             if (this.preserveEscapes) {                 pos++;                 continue;             }             buf.deleteCharAt((pos - 1));             chars = buf.buffer;             lengthChange--;             altered = true;             bufEnd--;         }else {             final int startPos = pos;             pos += startMatchLen;             int endMatchLen = 0;             int nestedVarCount = 0;             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             while (pos < bufEnd) {                 final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 if (startMatchLen == 0) {                     pos++;                 }else {                     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {                         if (this.preserveEscapes) {                             pos++;                             continue;                         }                         buf.deleteCharAt((pos - 1));                         chars = buf.buffer;                         lengthChange--;                         altered = true;                         bufEnd--;                     }else {                         final int startPos = pos;                         pos += startMatchLen;                         int endMatchLen = 0;                         int nestedVarCount = 0;                         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                             nestedVarCount++;                             pos += endMatchLen;                             continue;                         }                         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                         if (endMatchLen == 0) {                             pos++;                         }else {                             if (nestedVarCount == 0) {                                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                                 if (substitutionInVariablesEnabled) {                                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                                     substitute(bufName, 0, bufName.length());                                     varNameExpr = bufName.toString();                                 }                                 pos += endMatchLen;                                 final int endPos = pos;                                 java.lang.String varName = varNameExpr;                                 java.lang.String varDefaultValue = null;                                 if (valueDelimMatcher != null) {                                     final char[] varNameExprChars = varNameExpr.toCharArray();                                     int valueDelimiterMatchLen = 0;                                     for (int i = 0; i < (varNameExprChars.length); i++) {                                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                             break;                                         }                                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                             varName = varNameExpr.substring(0, i);                                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                             break;                                         }                                     }                                 }                                 if (priorVariables == null) {                                     priorVariables = new java.util.ArrayList<>();                                     priorVariables.add(new java.lang.String(chars, offset, length));                                 }                                 checkCyclicSubstitution(varName, priorVariables);                                 priorVariables.add(varName);                                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                                 if (varValue == null) {                                     varValue = varDefaultValue;                                 }                                 if (varValue != null) {                                     final int varLen = varValue.length();                                     buf.replace(startPos, endPos, varValue);                                     altered = true;                                     int change = 0;                                     if (!substitutionInValuesDisabled) {                                         change = substitute(buf, startPos, varLen, priorVariables);                                     }                                     change = (change + varLen) - (endPos - startPos);                                     pos += change;                                     bufEnd += change;                                     lengthChange += change;                                     chars = buf.buffer;                                 }                                 priorVariables.remove(((priorVariables.size()) - 1));                                 break;                             }                             nestedVarCount--;                             pos += endMatchLen;                         }                     }                 }             }          }     } } 
45	10	2	2
===	0	DELETE_CONTROL	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }
===	1	MUTATE_CONDITION	endMatchLen == 0	isEnableSubstitutionInVariables()
46	28	2	2
===	0	SWAP_USAGE	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         if (startMatchLen == 0) {             pos++;         }else {             if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {                 if (this.preserveEscapes) {                     pos++;                     continue;                 }                 buf.deleteCharAt((pos - 1));                 chars = buf.buffer;                 lengthChange--;                 altered = true;                 bufEnd--;             }else {                 final int startPos = pos;                 pos += startMatchLen;                 int endMatchLen = 0;                 int nestedVarCount = 0;                 while (pos < bufEnd) {                     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                         nestedVarCount++;                         pos += endMatchLen;                         continue;                     }                     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                     if (endMatchLen == 0) {                         pos++;                     }else {                         if (nestedVarCount == 0) {                             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                             if (substitutionInVariablesEnabled) {                                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                                 substitute(bufName, 0, bufName.length());                                 varNameExpr = bufName.toString();                             }                             pos += endMatchLen;                             final int endPos = pos;                             java.lang.String varName = varNameExpr;                             java.lang.String varDefaultValue = null;                             if (valueDelimMatcher != null) {                                 final char[] varNameExprChars = varNameExpr.toCharArray();                                 int valueDelimiterMatchLen = 0;                                 for (int i = 0; i < (varNameExprChars.length); i++) {                                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                         break;                                     }                                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                         varName = varNameExpr.substring(0, i);                                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                         break;                                     }                                 }                             }                             if (priorVariables == null) {                                 priorVariables = new java.util.ArrayList<>();                                 priorVariables.add(new java.lang.String(chars, offset, length));                             }                             checkCyclicSubstitution(varName, priorVariables);                             priorVariables.add(varName);                             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                             if (varValue == null) {                                 varValue = varDefaultValue;                             }                             if (varValue != null) {                                 final int varLen = varValue.length();                                 buf.replace(startPos, endPos, varValue);                                 altered = true;                                 int change = 0;                                 if (!substitutionInValuesDisabled) {                                     change = substitute(buf, startPos, varLen, priorVariables);                                 }                                 change = (change + varLen) - (endPos - startPos);                                 pos += change;                                 bufEnd += change;                                 lengthChange += change;                                 chars = buf.buffer;                             }                             priorVariables.remove(((priorVariables.size()) - 1));                             break;                         }                         nestedVarCount--;                         pos += endMatchLen;                     }                 }              }         }     } }	while (pos < bufEnd) {     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);         nestedVarCount++;         pos += endMatchLen;         continue;     }     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);     if (endMatchLen == 0) {         pos++;     }else {         if (nestedVarCount == 0) {             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));             if (substitutionInVariablesEnabled) {                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                 substitute(bufName, 0, bufName.length());                 varNameExpr = bufName.toString();             }             pos += endMatchLen;             final int endPos = pos;             java.lang.String varName = varNameExpr;             java.lang.String varDefaultValue = null;             if (valueDelimMatcher != null) {                 final char[] varNameExprChars = varNameExpr.toCharArray();                 int valueDelimiterMatchLen = 0;                 for (int i = 0; i < (varNameExprChars.length); i++) {                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                         break;                     }                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                         varName = varNameExpr.substring(0, i);                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                         break;                     }                 }             }             if (priorVariables == null) {                 priorVariables = new java.util.ArrayList<>();                 priorVariables.add(new java.lang.String(chars, offset, length));             }             checkCyclicSubstitution(varName, priorVariables);             priorVariables.add(varName);             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);             if (varValue == null) {                 varValue = varDefaultValue;             }             if (varValue != null) {                 final int varLen = varValue.length();                 buf.replace(startPos, endPos, varValue);                 altered = true;                 int change = 0;                 if (!substitutionInValuesDisabled) {                     change = substitute(buf, startPos, varLen, priorVariables);                 }                 change = (change + varLen) - (endPos - startPos);                 pos += change;                 bufEnd += change;                 lengthChange += change;                 chars = buf.buffer;             }             priorVariables.remove(((priorVariables.size()) - 1));             break;         }         nestedVarCount--;         pos += endMatchLen;     } } 
===	1	DELETE_USAGE	priorVariables.remove(((priorVariables.size()) - 1))
47	46	3	3
===	0	SWAP_USAGE	if (startMatchLen == 0) {     pos++; }else {     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         if (startMatchLen == 0) {             pos++;         }else {             if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {                 if (this.preserveEscapes) {                     pos++;                     continue;                 }                 buf.deleteCharAt((pos - 1));                 chars = buf.buffer;                 lengthChange--;                 altered = true;                 bufEnd--;             }else {                 final int startPos = pos;                 pos += startMatchLen;                 int endMatchLen = 0;                 int nestedVarCount = 0;                 while (pos < bufEnd) {                     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                         nestedVarCount++;                         pos += endMatchLen;                         continue;                     }                     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                     if (endMatchLen == 0) {                         pos++;                     }else {                         if (nestedVarCount == 0) {                             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                             if (substitutionInVariablesEnabled) {                                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                                 substitute(bufName, 0, bufName.length());                                 varNameExpr = bufName.toString();                             }                             pos += endMatchLen;                             final int endPos = pos;                             java.lang.String varName = varNameExpr;                             java.lang.String varDefaultValue = null;                             if (valueDelimMatcher != null) {                                 final char[] varNameExprChars = varNameExpr.toCharArray();                                 int valueDelimiterMatchLen = 0;                                 for (int i = 0; i < (varNameExprChars.length); i++) {                                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                         break;                                     }                                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                         varName = varNameExpr.substring(0, i);                                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                         break;                                     }                                 }                             }                             if (priorVariables == null) {                                 priorVariables = new java.util.ArrayList<>();                                 priorVariables.add(new java.lang.String(chars, offset, length));                             }                             checkCyclicSubstitution(varName, priorVariables);                             priorVariables.add(varName);                             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                             if (varValue == null) {                                 varValue = varDefaultValue;                             }                             if (varValue != null) {                                 final int varLen = varValue.length();                                 buf.replace(startPos, endPos, varValue);                                 altered = true;                                 int change = 0;                                 if (!substitutionInValuesDisabled) {                                     change = substitute(buf, startPos, varLen, priorVariables);                                 }                                 change = (change + varLen) - (endPos - startPos);                                 pos += change;                                 bufEnd += change;                                 lengthChange += change;                                 chars = buf.buffer;                             }                             priorVariables.remove(((priorVariables.size()) - 1));                             break;                         }                         nestedVarCount--;                         pos += endMatchLen;                     }                 }              }         }     } }	while (pos < bufEnd) {     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);         nestedVarCount++;         pos += endMatchLen;         continue;     }     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);     if (endMatchLen == 0) {         pos++;     }else {         if (nestedVarCount == 0) {             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));             if (substitutionInVariablesEnabled) {                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                 substitute(bufName, 0, bufName.length());                 varNameExpr = bufName.toString();             }             pos += endMatchLen;             final int endPos = pos;             java.lang.String varName = varNameExpr;             java.lang.String varDefaultValue = null;             if (valueDelimMatcher != null) {                 final char[] varNameExprChars = varNameExpr.toCharArray();                 int valueDelimiterMatchLen = 0;                 for (int i = 0; i < (varNameExprChars.length); i++) {                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                         break;                     }                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                         varName = varNameExpr.substring(0, i);                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                         break;                     }                 }             }             if (priorVariables == null) {                 priorVariables = new java.util.ArrayList<>();                 priorVariables.add(new java.lang.String(chars, offset, length));             }             checkCyclicSubstitution(varName, priorVariables);             priorVariables.add(varName);             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);             if (varValue == null) {                 varValue = varDefaultValue;             }             if (varValue != null) {                 final int varLen = varValue.length();                 buf.replace(startPos, endPos, varValue);                 altered = true;                 int change = 0;                 if (!substitutionInValuesDisabled) {                     change = substitute(buf, startPos, varLen, priorVariables);                 }                 change = (change + varLen) - (endPos - startPos);                 pos += change;                 bufEnd += change;                 lengthChange += change;                 chars = buf.buffer;             }             priorVariables.remove(((priorVariables.size()) - 1));             break;         }         nestedVarCount--;         pos += endMatchLen;     } } 
===	1	DELETE_USAGE	priorVariables.remove(((priorVariables.size()) - 1))
===	2	DELETE_CONTROL	while (pos < bufEnd) {     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);         nestedVarCount++;         pos += endMatchLen;         continue;     }     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);     if (endMatchLen == 0) {         pos++;     }else {         if (nestedVarCount == 0) {             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));             if (substitutionInVariablesEnabled) {                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                 substitute(bufName, 0, bufName.length());                 varNameExpr = bufName.toString();             }             pos += endMatchLen;             final int endPos = pos;             java.lang.String varName = varNameExpr;             java.lang.String varDefaultValue = null;             if (valueDelimMatcher != null) {                 final char[] varNameExprChars = varNameExpr.toCharArray();                 int valueDelimiterMatchLen = 0;                 for (int i = 0; i < (varNameExprChars.length); i++) {                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                         break;                     }                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                         varName = varNameExpr.substring(0, i);                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                         break;                     }                 }             }             if (priorVariables == null) {                 priorVariables = new java.util.ArrayList<>();                 priorVariables.add(new java.lang.String(chars, offset, length));             }             checkCyclicSubstitution(varName, priorVariables);             priorVariables.add(varName);             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);             if (varValue == null) {                 varValue = varDefaultValue;             }             if (varValue != null) {                 final int varLen = varValue.length();                 buf.replace(startPos, endPos, varValue);                 altered = true;                 int change = 0;                 if (!substitutionInValuesDisabled) {                     change = substitute(buf, startPos, varLen, priorVariables);                 }                 change = (change + varLen) - (endPos - startPos);                 pos += change;                 bufEnd += change;                 lengthChange += change;                 chars = buf.buffer;             }             break;         }         nestedVarCount--;         pos += endMatchLen;     } } 	while (pos < bufEnd) {     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);         nestedVarCount++;         pos += endMatchLen;         continue;     }     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);     if (endMatchLen == 0) {         pos++;     }else {         if (nestedVarCount == 0) {             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));             if (substitutionInVariablesEnabled) {                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                 substitute(bufName, 0, bufName.length());                 varNameExpr = bufName.toString();             }             pos += endMatchLen;             final int endPos = pos;             java.lang.String varName = varNameExpr;             java.lang.String varDefaultValue = null;             if (valueDelimMatcher != null) {                 final char[] varNameExprChars = varNameExpr.toCharArray();                 int valueDelimiterMatchLen = 0;                 for (int i = 0; i < (varNameExprChars.length); i++) {                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                         break;                     }                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                         varName = varNameExpr.substring(0, i);                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                         break;                     }                 }             }             if (priorVariables == null) {                 priorVariables = new java.util.ArrayList<>();                 priorVariables.add(new java.lang.String(chars, offset, length));             }             checkCyclicSubstitution(varName, priorVariables);             priorVariables.add(varName);             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);             if (varValue == null) {                 varValue = varDefaultValue;             }             if (varValue != null) {                 final int varLen = varValue.length();                 buf.replace(startPos, endPos, varValue);                 altered = true;                 int change = 0;                 if (!substitutionInValuesDisabled) {                     change = substitute(buf, startPos, varLen, priorVariables);                 }                 change = (change + varLen) - (endPos - startPos);                 pos += change;                 bufEnd += change;                 lengthChange += change;                 chars = buf.buffer;             }             break;         }         nestedVarCount--;         pos += endMatchLen;     } } 
48	0	1	1
===	0	SWAP_USAGE	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }	while (pos < bufEnd) {     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);         nestedVarCount++;         pos += endMatchLen;         continue;     }     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);     if (endMatchLen == 0) {         pos++;     }else {         if (nestedVarCount == 0) {             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));             if (substitutionInVariablesEnabled) {                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                 substitute(bufName, 0, bufName.length());                 varNameExpr = bufName.toString();             }             pos += endMatchLen;             final int endPos = pos;             java.lang.String varName = varNameExpr;             java.lang.String varDefaultValue = null;             if (valueDelimMatcher != null) {                 final char[] varNameExprChars = varNameExpr.toCharArray();                 int valueDelimiterMatchLen = 0;                 for (int i = 0; i < (varNameExprChars.length); i++) {                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                         break;                     }                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                         varName = varNameExpr.substring(0, i);                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                         break;                     }                 }             }             if (priorVariables == null) {                 priorVariables = new java.util.ArrayList<>();                 priorVariables.add(new java.lang.String(chars, offset, length));             }             checkCyclicSubstitution(varName, priorVariables);             priorVariables.add(varName);             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);             if (varValue == null) {                 varValue = varDefaultValue;             }             if (varValue != null) {                 final int varLen = varValue.length();                 buf.replace(startPos, endPos, varValue);                 altered = true;                 int change = 0;                 if (!substitutionInValuesDisabled) {                     change = substitute(buf, startPos, varLen, priorVariables);                 }                 change = (change + varLen) - (endPos - startPos);                 pos += change;                 bufEnd += change;                 lengthChange += change;                 chars = buf.buffer;             }             priorVariables.remove(((priorVariables.size()) - 1));             break;         }         nestedVarCount--;         pos += endMatchLen;     } } 
49	8	2	2
===	0	DELETE_CONTROL	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }
===	1	DELETE_CONTROL	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if (this.preserveEscapes) {             pos++;             continue;         }         chars = buf.buffer;         altered = true;         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } } 	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if (this.preserveEscapes) {             pos++;             continue;         }         chars = buf.buffer;         altered = true;         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } } 
50	8	2	2
===	0	DELETE_CONTROL	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }
===	1	MUTATE_CONDITION	startMatchLen == 0	altered
51	38	2	2
===	0	MUTATE_CONDITION	(pos > offset)	(this.preserveEscapes)
===	1	MUTATE_CONDITION	((chars[(pos - 1)]) == escape)	(!substitutionInValuesDisabled)
52	0	1	1
===	0	SWAP_USAGE	while (pos < bufEnd) {     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);         nestedVarCount++;         pos += endMatchLen;         continue;     }     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);     if (endMatchLen == 0) {         pos++;     }else {         if (nestedVarCount == 0) {             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));             if (substitutionInVariablesEnabled) {                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                 substitute(bufName, 0, bufName.length());                 varNameExpr = bufName.toString();             }             pos += endMatchLen;             final int endPos = pos;             java.lang.String varName = varNameExpr;             java.lang.String varDefaultValue = null;             if (valueDelimMatcher != null) {                 final char[] varNameExprChars = varNameExpr.toCharArray();                 int valueDelimiterMatchLen = 0;                 for (int i = 0; i < (varNameExprChars.length); i++) {                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                         break;                     }                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                         varName = varNameExpr.substring(0, i);                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                         break;                     }                 }             }             if (priorVariables == null) {                 priorVariables = new java.util.ArrayList<>();                 priorVariables.add(new java.lang.String(chars, offset, length));             }             checkCyclicSubstitution(varName, priorVariables);             priorVariables.add(varName);             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);             if (varValue == null) {                 varValue = varDefaultValue;             }             if (varValue != null) {                 final int varLen = varValue.length();                 buf.replace(startPos, endPos, varValue);                 altered = true;                 int change = 0;                 if (!substitutionInValuesDisabled) {                     change = substitute(buf, startPos, varLen, priorVariables);                 }                 change = (change + varLen) - (endPos - startPos);                 pos += change;                 bufEnd += change;                 lengthChange += change;                 chars = buf.buffer;             }             priorVariables.remove(((priorVariables.size()) - 1));             break;         }         nestedVarCount--;         pos += endMatchLen;     } } 	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {             if (this.preserveEscapes) {                 pos++;                 continue;             }             buf.deleteCharAt((pos - 1));             chars = buf.buffer;             lengthChange--;             altered = true;             bufEnd--;         }else {             final int startPos = pos;             pos += startMatchLen;             int endMatchLen = 0;             int nestedVarCount = 0;             while (pos < bufEnd) {                 final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 if (startMatchLen == 0) {                     pos++;                 }else {                     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {                         if (this.preserveEscapes) {                             pos++;                             continue;                         }                         buf.deleteCharAt((pos - 1));                         chars = buf.buffer;                         lengthChange--;                         altered = true;                         bufEnd--;                     }else {                         final int startPos = pos;                         pos += startMatchLen;                         int endMatchLen = 0;                         int nestedVarCount = 0;                         while (pos < bufEnd) {                             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                                 nestedVarCount++;                                 pos += endMatchLen;                                 continue;                             }                             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);                             if (endMatchLen == 0) {                                 pos++;                             }else {                                 if (nestedVarCount == 0) {                                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                                     if (substitutionInVariablesEnabled) {                                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                                         substitute(bufName, 0, bufName.length());                                         varNameExpr = bufName.toString();                                     }                                     pos += endMatchLen;                                     final int endPos = pos;                                     java.lang.String varName = varNameExpr;                                     java.lang.String varDefaultValue = null;                                     if (valueDelimMatcher != null) {                                         final char[] varNameExprChars = varNameExpr.toCharArray();                                         int valueDelimiterMatchLen = 0;                                         for (int i = 0; i < (varNameExprChars.length); i++) {                                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                                 break;                                             }                                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                                 varName = varNameExpr.substring(0, i);                                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                                 break;                                             }                                         }                                     }                                     if (priorVariables == null) {                                         priorVariables = new java.util.ArrayList<>();                                         priorVariables.add(new java.lang.String(chars, offset, length));                                     }                                     checkCyclicSubstitution(varName, priorVariables);                                     priorVariables.add(varName);                                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                                     if (varValue == null) {                                         varValue = varDefaultValue;                                     }                                     if (varValue != null) {                                         final int varLen = varValue.length();                                         buf.replace(startPos, endPos, varValue);                                         altered = true;                                         int change = 0;                                         if (!substitutionInValuesDisabled) {                                             change = substitute(buf, startPos, varLen, priorVariables);                                         }                                         change = (change + varLen) - (endPos - startPos);                                         pos += change;                                         bufEnd += change;                                         lengthChange += change;                                         chars = buf.buffer;                                     }                                     priorVariables.remove(((priorVariables.size()) - 1));                                     break;                                 }                                 nestedVarCount--;                                 pos += endMatchLen;                             }                         }                      }                 }             }          }     } } 
53	0	1	1
===	0	SWAP_USAGE	while (pos < bufEnd) {     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);         nestedVarCount++;         pos += endMatchLen;         continue;     }     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);     if (endMatchLen == 0) {         pos++;     }else {         if (nestedVarCount == 0) {             java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));             if (substitutionInVariablesEnabled) {                 final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                 substitute(bufName, 0, bufName.length());                 varNameExpr = bufName.toString();             }             pos += endMatchLen;             final int endPos = pos;             java.lang.String varName = varNameExpr;             java.lang.String varDefaultValue = null;             if (valueDelimMatcher != null) {                 final char[] varNameExprChars = varNameExpr.toCharArray();                 int valueDelimiterMatchLen = 0;                 for (int i = 0; i < (varNameExprChars.length); i++) {                     if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                         break;                     }                     if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                         valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                         varName = varNameExpr.substring(0, i);                         varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                         break;                     }                 }             }             if (priorVariables == null) {                 priorVariables = new java.util.ArrayList<>();                 priorVariables.add(new java.lang.String(chars, offset, length));             }             checkCyclicSubstitution(varName, priorVariables);             priorVariables.add(varName);             java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);             if (varValue == null) {                 varValue = varDefaultValue;             }             if (varValue != null) {                 final int varLen = varValue.length();                 buf.replace(startPos, endPos, varValue);                 altered = true;                 int change = 0;                 if (!substitutionInValuesDisabled) {                     change = substitute(buf, startPos, varLen, priorVariables);                 }                 change = (change + varLen) - (endPos - startPos);                 pos += change;                 bufEnd += change;                 lengthChange += change;                 chars = buf.buffer;             }             priorVariables.remove(((priorVariables.size()) - 1));             break;         }         nestedVarCount--;         pos += endMatchLen;     } } 	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {         if (this.preserveEscapes) {             pos++;             continue;         }         buf.deleteCharAt((pos - 1));         chars = buf.buffer;         lengthChange--;         altered = true;         bufEnd--;     }else {         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } }
54	18	2	2
===	0	SWAP_USAGE	if (nestedVarCount == 0) {     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));     if (substitutionInVariablesEnabled) {         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);         substitute(bufName, 0, bufName.length());         varNameExpr = bufName.toString();     }     pos += endMatchLen;     final int endPos = pos;     java.lang.String varName = varNameExpr;     java.lang.String varDefaultValue = null;     if (valueDelimMatcher != null) {         final char[] varNameExprChars = varNameExpr.toCharArray();         int valueDelimiterMatchLen = 0;         for (int i = 0; i < (varNameExprChars.length); i++) {             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                 break;             }             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                 varName = varNameExpr.substring(0, i);                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                 break;             }         }     }     if (priorVariables == null) {         priorVariables = new java.util.ArrayList<>();         priorVariables.add(new java.lang.String(chars, offset, length));     }     checkCyclicSubstitution(varName, priorVariables);     priorVariables.add(varName);     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);     if (varValue == null) {         varValue = varDefaultValue;     }     if (varValue != null) {         final int varLen = varValue.length();         buf.replace(startPos, endPos, varValue);         altered = true;         int change = 0;         if (!substitutionInValuesDisabled) {             change = substitute(buf, startPos, varLen, priorVariables);         }         change = (change + varLen) - (endPos - startPos);         pos += change;         bufEnd += change;         lengthChange += change;         chars = buf.buffer;     }     priorVariables.remove(((priorVariables.size()) - 1));     break; }	while (pos < bufEnd) {     if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {         endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);         nestedVarCount++;         pos += endMatchLen;         continue;     }     endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);     if (endMatchLen == 0) {         pos++;     }else {         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }          nestedVarCount--;         pos += endMatchLen;     } } 
===	1	SWAP_USAGE	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (startMatchLen == 0) {         pos++;     }else {         while (pos < bufEnd) {             final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             if (startMatchLen == 0) {                 pos++;             }else {                 if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {                     if (this.preserveEscapes) {                         pos++;                         continue;                     }                     buf.deleteCharAt((pos - 1));                     chars = buf.buffer;                     lengthChange--;                     altered = true;                     bufEnd--;                 }else {                     final int startPos = pos;                     pos += startMatchLen;                     int endMatchLen = 0;                     int nestedVarCount = 0;                     if (nestedVarCount == 0) {                         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                         if (substitutionInVariablesEnabled) {                             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                             substitute(bufName, 0, bufName.length());                             varNameExpr = bufName.toString();                         }                         pos += endMatchLen;                         final int endPos = pos;                         java.lang.String varName = varNameExpr;                         java.lang.String varDefaultValue = null;                         if (valueDelimMatcher != null) {                             final char[] varNameExprChars = varNameExpr.toCharArray();                             int valueDelimiterMatchLen = 0;                             for (int i = 0; i < (varNameExprChars.length); i++) {                                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                     break;                                 }                                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                     varName = varNameExpr.substring(0, i);                                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                     break;                                 }                             }                         }                         if (priorVariables == null) {                             priorVariables = new java.util.ArrayList<>();                             priorVariables.add(new java.lang.String(chars, offset, length));                         }                         checkCyclicSubstitution(varName, priorVariables);                         priorVariables.add(varName);                         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                         if (varValue == null) {                             varValue = varDefaultValue;                         }                         if (varValue != null) {                             final int varLen = varValue.length();                             buf.replace(startPos, endPos, varValue);                             altered = true;                             int change = 0;                             if (!substitutionInValuesDisabled) {                                 change = substitute(buf, startPos, varLen, priorVariables);                             }                             change = (change + varLen) - (endPos - startPos);                             pos += change;                             bufEnd += change;                             lengthChange += change;                             chars = buf.buffer;                         }                         priorVariables.remove(((priorVariables.size()) - 1));                         break;                     }                 }             }         }      } } 	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     if (nestedVarCount == 0) {         java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));         if (substitutionInVariablesEnabled) {             final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);             substitute(bufName, 0, bufName.length());             varNameExpr = bufName.toString();         }         pos += endMatchLen;         final int endPos = pos;         java.lang.String varName = varNameExpr;         java.lang.String varDefaultValue = null;         if (valueDelimMatcher != null) {             final char[] varNameExprChars = varNameExpr.toCharArray();             int valueDelimiterMatchLen = 0;             for (int i = 0; i < (varNameExprChars.length); i++) {                 if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                     break;                 }                 if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                     valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                     varName = varNameExpr.substring(0, i);                     varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                     break;                 }             }         }         if (priorVariables == null) {             priorVariables = new java.util.ArrayList<>();             priorVariables.add(new java.lang.String(chars, offset, length));         }         checkCyclicSubstitution(varName, priorVariables);         priorVariables.add(varName);         java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);         if (varValue == null) {             varValue = varDefaultValue;         }         if (varValue != null) {             final int varLen = varValue.length();             buf.replace(startPos, endPos, varValue);             altered = true;             int change = 0;             if (!substitutionInValuesDisabled) {                 change = substitute(buf, startPos, varLen, priorVariables);             }             change = (change + varLen) - (endPos - startPos);             pos += change;             bufEnd += change;             lengthChange += change;             chars = buf.buffer;         }         priorVariables.remove(((priorVariables.size()) - 1));         break;     } }
55	50	3	3
===	0	DELETE_CONTROL	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }	if ((pos > offset) && ((chars[(pos - 1)]) == escape)) {     if (this.preserveEscapes) {         pos++;         continue;     }     buf.deleteCharAt((pos - 1));     chars = buf.buffer;     lengthChange--;     altered = true;     bufEnd--; }else {     final int startPos = pos;     pos += startMatchLen;     int endMatchLen = 0;     int nestedVarCount = 0;     while (pos < bufEnd) {         if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {             endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);             nestedVarCount++;             pos += endMatchLen;             continue;         }         endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);         if (endMatchLen == 0) {             pos++;         }else {             if (nestedVarCount == 0) {                 java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                 if (substitutionInVariablesEnabled) {                     final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                     substitute(bufName, 0, bufName.length());                     varNameExpr = bufName.toString();                 }                 pos += endMatchLen;                 final int endPos = pos;                 java.lang.String varName = varNameExpr;                 java.lang.String varDefaultValue = null;                 if (valueDelimMatcher != null) {                     final char[] varNameExprChars = varNameExpr.toCharArray();                     int valueDelimiterMatchLen = 0;                     for (int i = 0; i < (varNameExprChars.length); i++) {                         if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                             break;                         }                         if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                             valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                             varName = varNameExpr.substring(0, i);                             varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                             break;                         }                     }                 }                 if (priorVariables == null) {                     priorVariables = new java.util.ArrayList<>();                     priorVariables.add(new java.lang.String(chars, offset, length));                 }                 checkCyclicSubstitution(varName, priorVariables);                 priorVariables.add(varName);                 java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                 if (varValue == null) {                     varValue = varDefaultValue;                 }                 if (varValue != null) {                     final int varLen = varValue.length();                     buf.replace(startPos, endPos, varValue);                     altered = true;                     int change = 0;                     if (!substitutionInValuesDisabled) {                         change = substitute(buf, startPos, varLen, priorVariables);                     }                     change = (change + varLen) - (endPos - startPos);                     pos += change;                     bufEnd += change;                     lengthChange += change;                     chars = buf.buffer;                 }                 priorVariables.remove(((priorVariables.size()) - 1));                 break;             }             nestedVarCount--;             pos += endMatchLen;         }     }  }
===	1	MUTATE_CONDITION	startMatchLen == 0	altered
===	2	DELETE_CONTROL	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (altered) {         pos++;     }else {         if (this.preserveEscapes) {             pos++;             continue;         }         chars = buf.buffer;         altered = true;         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } } 	while (pos < bufEnd) {     final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);     if (altered) {         pos++;     }else {         if (this.preserveEscapes) {             pos++;             continue;         }         chars = buf.buffer;         altered = true;         final int startPos = pos;         pos += startMatchLen;         int endMatchLen = 0;         int nestedVarCount = 0;         while (pos < bufEnd) {             if (substitutionInVariablesEnabled && ((pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0)) {                 endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);                 nestedVarCount++;                 pos += endMatchLen;                 continue;             }             endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);             if (endMatchLen == 0) {                 pos++;             }else {                 if (nestedVarCount == 0) {                     java.lang.String varNameExpr = new java.lang.String(chars, (startPos + startMatchLen), ((pos - startPos) - startMatchLen));                     if (substitutionInVariablesEnabled) {                         final org.apache.commons.text.StrBuilder bufName = new org.apache.commons.text.StrBuilder(varNameExpr);                         substitute(bufName, 0, bufName.length());                         varNameExpr = bufName.toString();                     }                     pos += endMatchLen;                     final int endPos = pos;                     java.lang.String varName = varNameExpr;                     java.lang.String varDefaultValue = null;                     if (valueDelimMatcher != null) {                         final char[] varNameExprChars = varNameExpr.toCharArray();                         int valueDelimiterMatchLen = 0;                         for (int i = 0; i < (varNameExprChars.length); i++) {                             if ((!substitutionInVariablesEnabled) && ((pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length)) != 0)) {                                 break;                             }                             if ((valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {                                 valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i);                                 varName = varNameExpr.substring(0, i);                                 varDefaultValue = varNameExpr.substring((i + valueDelimiterMatchLen));                                 break;                             }                         }                     }                     if (priorVariables == null) {                         priorVariables = new java.util.ArrayList<>();                         priorVariables.add(new java.lang.String(chars, offset, length));                     }                     checkCyclicSubstitution(varName, priorVariables);                     priorVariables.add(varName);                     java.lang.String varValue = resolveVariable(varName, buf, startPos, endPos);                     if (varValue == null) {                         varValue = varDefaultValue;                     }                     if (varValue != null) {                         final int varLen = varValue.length();                         buf.replace(startPos, endPos, varValue);                         altered = true;                         int change = 0;                         if (!substitutionInValuesDisabled) {                             change = substitute(buf, startPos, varLen, priorVariables);                         }                         change = (change + varLen) - (endPos - startPos);                         pos += change;                         bufEnd += change;                         lengthChange += change;                         chars = buf.buffer;                     }                     priorVariables.remove(((priorVariables.size()) - 1));                     break;                 }                 nestedVarCount--;                 pos += endMatchLen;             }         }      } } 
