priorVariables.add(new String(chars,offset,length))	41140	41237	952	953	EXPRESSION_STATEMENT::::priorVariables.add(new String(chars,offset,length)); ::::41140::::41238::::IF_STATEMENT::::if (priorVariables == null) {   priorVariables=new ArrayList<>();   priorVariables.add(new String(chars,offset,length)); } ::::41002::::41272
priorVariables.add(varName)	41450	41477	958	958	EXPRESSION_STATEMENT::::priorVariables.add(varName); ::::41450::::41478::::IF_STATEMENT::::if (nestedVarCount == 0) {   String varNameExpr=new String(chars,startPos + startMatchLen,pos - startPos - startMatchLen);   if (substitutionInVariablesEnabled) {     final StrBuilder bufName=new StrBuilder(varNameExpr);     substitute(bufName,0,bufName.length());     varNameExpr=bufName.toString();   }   pos+=endMatchLen;   final int endPos=pos;   String varName=varNameExpr;   String varDefaultValue=null;   if (valueDelimMatcher != null) {     final char[] varNameExprChars=varNameExpr.toCharArray();     int valueDelimiterMatchLen=0;     for (int i=0; i < varNameExprChars.length; i++) {       if (!substitutionInVariablesEnabled && pfxMatcher.isMatch(varNameExprChars,i,i,varNameExprChars.length) != 0) {         break;       }       if (valueDelimMatcher.isMatch(varNameExprChars,i) != 0) {         valueDelimiterMatchLen=valueDelimMatcher.isMatch(varNameExprChars,i);         varName=varNameExpr.substring(0,i);         varDefaultValue=varNameExpr.substring(i + valueDelimiterMatchLen);         break;       }     }   }   if (priorVariables == null) {     priorVariables=new ArrayList<>();     priorVariables.add(new String(chars,offset,length));   }   checkCyclicSubstitution(varName,priorVariables);   priorVariables.add(varName);   String varValue=resolveVariable(varName,buf,startPos,endPos);   if (varValue == null) {     varValue=varDefaultValue;   }   if (varValue != null) {     final int varLen=varValue.length();     buf.replace(startPos,endPos,varValue);     altered=true;     int change=0;     if (!substitutionInValuesDisabled) {       change=substitute(buf,startPos,varLen,priorVariables);     }     change=change + varLen - (endPos - startPos);     pos+=change;     bufEnd+=change;     lengthChange+=change;     chars=buf.buffer;   }   priorVariables.remove(priorVariables.size() - 1);   break; } ::::38464::::43149
priorVariables.remove(priorVariables.size() - 1)	42990	43079	985	986	EXPRESSION_STATEMENT::::priorVariables.remove(priorVariables.size() - 1); ::::42990::::43080::::IF_STATEMENT::::if (nestedVarCount == 0) {   String varNameExpr=new String(chars,startPos + startMatchLen,pos - startPos - startMatchLen);   if (substitutionInVariablesEnabled) {     final StrBuilder bufName=new StrBuilder(varNameExpr);     substitute(bufName,0,bufName.length());     varNameExpr=bufName.toString();   }   pos+=endMatchLen;   final int endPos=pos;   String varName=varNameExpr;   String varDefaultValue=null;   if (valueDelimMatcher != null) {     final char[] varNameExprChars=varNameExpr.toCharArray();     int valueDelimiterMatchLen=0;     for (int i=0; i < varNameExprChars.length; i++) {       if (!substitutionInVariablesEnabled && pfxMatcher.isMatch(varNameExprChars,i,i,varNameExprChars.length) != 0) {         break;       }       if (valueDelimMatcher.isMatch(varNameExprChars,i) != 0) {         valueDelimiterMatchLen=valueDelimMatcher.isMatch(varNameExprChars,i);         varName=varNameExpr.substring(0,i);         varDefaultValue=varNameExpr.substring(i + valueDelimiterMatchLen);         break;       }     }   }   if (priorVariables == null) {     priorVariables=new ArrayList<>();     priorVariables.add(new String(chars,offset,length));   }   checkCyclicSubstitution(varName,priorVariables);   priorVariables.add(varName);   String varValue=resolveVariable(varName,buf,startPos,endPos);   if (varValue == null) {     varValue=varDefaultValue;   }   if (varValue != null) {     final int varLen=varValue.length();     buf.replace(startPos,endPos,varValue);     altered=true;     int change=0;     if (!substitutionInValuesDisabled) {       change=substitute(buf,startPos,varLen,priorVariables);     }     change=change + varLen - (endPos - startPos);     pos+=change;     bufEnd+=change;     lengthChange+=change;     chars=buf.buffer;   }   priorVariables.remove(priorVariables.size() - 1);   break; } ::::38464::::43149
priorVariables.size()	43053	43074	986	986	EXPRESSION_STATEMENT::::priorVariables.remove(priorVariables.size() - 1); ::::42990::::43080::::IF_STATEMENT::::if (nestedVarCount == 0) {   String varNameExpr=new String(chars,startPos + startMatchLen,pos - startPos - startMatchLen);   if (substitutionInVariablesEnabled) {     final StrBuilder bufName=new StrBuilder(varNameExpr);     substitute(bufName,0,bufName.length());     varNameExpr=bufName.toString();   }   pos+=endMatchLen;   final int endPos=pos;   String varName=varNameExpr;   String varDefaultValue=null;   if (valueDelimMatcher != null) {     final char[] varNameExprChars=varNameExpr.toCharArray();     int valueDelimiterMatchLen=0;     for (int i=0; i < varNameExprChars.length; i++) {       if (!substitutionInVariablesEnabled && pfxMatcher.isMatch(varNameExprChars,i,i,varNameExprChars.length) != 0) {         break;       }       if (valueDelimMatcher.isMatch(varNameExprChars,i) != 0) {         valueDelimiterMatchLen=valueDelimMatcher.isMatch(varNameExprChars,i);         varName=varNameExpr.substring(0,i);         varDefaultValue=varNameExpr.substring(i + valueDelimiterMatchLen);         break;       }     }   }   if (priorVariables == null) {     priorVariables=new ArrayList<>();     priorVariables.add(new String(chars,offset,length));   }   checkCyclicSubstitution(varName,priorVariables);   priorVariables.add(varName);   String varValue=resolveVariable(varName,buf,startPos,endPos);   if (varValue == null) {     varValue=varDefaultValue;   }   if (varValue != null) {     final int varLen=varValue.length();     buf.replace(startPos,endPos,varValue);     altered=true;     int change=0;     if (!substitutionInValuesDisabled) {       change=substitute(buf,startPos,varLen,priorVariables);     }     change=change + varLen - (endPos - startPos);     pos+=change;     bufEnd+=change;     lengthChange+=change;     chars=buf.buffer;   }   priorVariables.remove(priorVariables.size() - 1);   break; } ::::38464::::43149
